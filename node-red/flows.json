[
    {
        "id": "62f31c6b53afb626",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac73cfbba5e1dcae",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "c05b66df7c049376",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "f519202eda84521a",
        "type": "ui-page",
        "name": "Page 1",
        "ui": "ac73cfbba5e1dcae",
        "path": "/page1",
        "icon": "home",
        "layout": "grid",
        "theme": "c05b66df7c049376",
        "breakpoints": [
            {
                "name": "Default",
                "px": 0,
                "cols": 3
            },
            {
                "name": "Tablet",
                "px": 576,
                "cols": 6
            },
            {
                "name": "Small Desktop",
                "px": 768,
                "cols": 9
            },
            {
                "name": "Desktop",
                "px": 1024,
                "cols": 12
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "883d8d3194f035d9",
        "type": "ui-group",
        "name": "Group 1",
        "page": "f519202eda84521a",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "315ea8347fb746b3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "df031482b6ed6ab2",
        "type": "ui-page",
        "name": "SensorSentinel Admin",
        "ui": "ac73cfbba5e1dcae",
        "path": "/admin",
        "icon": "home",
        "layout": "grid",
        "theme": "c05b66df7c049376",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "105a8e7c53d8d74f",
        "type": "ui-group",
        "name": "SensorSentinel Admin",
        "page": "df031482b6ed6ab2",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "526ecc0b4996d3ac",
        "type": "mqtt in",
        "z": "62f31c6b53afb626",
        "name": "LoRa messages",
        "topic": "#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "315ea8347fb746b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 440,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a55a6868925ad162",
        "type": "function",
        "z": "62f31c6b53afb626",
        "name": "Parse LoRa message",
        "func": "// The MQTT payload is already an object, not a string\nnode.log(\"Received from node: \" + msg.payload.nodeId);\nnode.log(\"Full message: \" + JSON.stringify(msg.payload, null, 2));\n\n// Just pass it through for now\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 320,
        "wires": [
            [
                "245051e60d123ed7"
            ]
        ]
    },
    {
        "id": "245051e60d123ed7",
        "type": "debug",
        "z": "62f31c6b53afb626",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 560,
        "wires": []
    },
    {
        "id": "03b8ce6774a2abb5",
        "type": "function",
        "z": "62f31c6b53afb626",
        "name": "Owner Manager",
        "func": "const topic = msg.topic; // Retrieve the topic from the incoming message\nconst payload = msg.payload; // Retrieve the payload containing the necessary data\n\nconst noLogTopics = [\n    \"get_devices\",\n    \"add_device\",\n    \"update_device\",\n    \"devices_data\",\n    \"owners_data\"\n];\n\nif (!noLogTopics.includes(topic)) {\n    node.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg)); // Log the whole message\n}\n\nswitch (topic) {\n    case \"get_owners\":\n        // Fetch the list of owners from the global context\n        const owners = global.get(\"owners\") || {};\n        msg.payload = owners; // Set the payload to owners\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        node.log(\"Fetched owners: \" + JSON.stringify(owners)); // Log the owners\n        return msg; // Ensure to return the message\n\n    case \"add_owner\":\n        // Add a new owner\n        const allOwners = global.get(\"owners\") || {};\n\n        // Ensure the owner name is provided and is unique\n        if (!payload.name) {\n            node.log(\"Owner name is missing. Cannot add owner.\"); // Log missing name error\n            return { topic: \"owner_error\", payload: { error: \"Owner name is required.\" } }; // Return error feedback\n        }\n\n        // Check for unique owner name\n        if (allOwners[payload.name]) {\n            node.log(\"Owner name already exists: \" + payload.name); // Log duplicate name error\n            return { topic: \"owner_error\", payload: { error: \"Owner name must be unique.\" } }; // Return error feedback\n        }\n\n        // Create new owner object with name and other details\n        allOwners[payload.name] = {\n            name: payload.name, // Include the name property\n            email: payload.email || \"\",\n            phone: payload.phone || \"\",\n            devices: [], // Initialize associated devices as an empty array\n            created: new Date().toISOString() // Set the creation timestamp\n        };\n\n        global.set(\"owners\", allOwners); // Save updated owners to global context\n        node.log(\"Added owner: \" + payload.name); // Log the newly added owner\n\n        msg.payload = allOwners; // Set the payload to the updated list of owners\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        return msg; // Ensure to return the message\n\n    case \"update_owner\":\n        // Update an existing owner\n        const ownersToUpdate = global.get(\"owners\") || {};\n        if (ownersToUpdate[payload.name]) {\n            ownersToUpdate[payload.name] = {\n                ...ownersToUpdate[payload.name], // Retain existing properties\n                ...payload.data, // Update with new data\n                updated: new Date().toISOString() // Update the timestamp\n            };\n            global.set(\"owners\", ownersToUpdate); // Save the updated owner info\n            node.log(\"Updated owner: \" + JSON.stringify(ownersToUpdate[payload.name])); // Log the update\n            msg.payload = ownersToUpdate; // Set payload to updated owners\n            msg.topic = \"owners_data\"; // Change the topic for the response\n        } else {\n            node.log(\"Owner name not found: \" + payload.name); // Log if the owner name does not exist\n            return { topic: \"owner_error\", payload: { error: \"Owner name not found.\" } }; // Return error feedback\n        }\n        return msg; // Return message for success\n\n    case \"delete_owner\":\n        // Delete an owner and their associated devices\n        const ownersToDelete = global.get(\"owners\") || {};\n        const devices = global.get(\"devices\") || {}; // Retrieve existing devices\n\n        if (ownersToDelete[payload.name]) {\n            // Get the IDs of devices associated with this owner\n            const ownerDevices = ownersToDelete[payload.name].devices || [];\n\n            // Remove any associated devices from the devices registry\n            ownerDevices.forEach(deviceName => {\n                delete devices[deviceName]; // Remove the device from the global devices object\n            });\n\n            // Update the global devices list\n            global.set(\"devices\", devices);\n\n            // Now delete the owner\n            delete ownersToDelete[payload.name];\n            global.set(\"owners\", ownersToDelete); // Save updated owners\n            node.log(\"Deleted owner: \" + payload.name + \" and their devices\"); // Log the deletion\n        } else {\n            node.log(\"Owner name not found for deletion: \" + payload.name); // Log if the owner name does not exist\n            return { topic: \"owner_error\", payload: { error: \"Owner name not found for deletion.\" } }; // Return error feedback\n        }\n\n        msg.payload = ownersToDelete; // Set payload to the updated owner list\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        return msg; // Return message for success\n\n    default:\n        // Log if the topic is unrecognized\n        return null;\n}\n\n// Return the message to the caller (redundant since every case returns earlier)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 360,
        "wires": [
            [
                "2bef7abf62977ab5"
            ]
        ]
    },
    {
        "id": "7100665dc8d8ec55",
        "type": "function",
        "z": "62f31c6b53afb626",
        "name": "Node Admin",
        "func": "const topic = msg.topic; // Retrieve the topic from the incoming message\nconst payload = msg.payload; // Retrieve the payload containing the necessary data\n\nconst noLogTopics = [\n    \"get_owners\",\n    \"add_owner\",\n    \"update_owner\",\n    \"delete_owner\",\n    \"devices_data\", // Changed from nodes_data to devices_data\n    \"owners_data\"\n];\n\nif (!noLogTopics.includes(topic)) {\n    node.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg)); // Log the whole message\n}\n\nswitch (topic) {\n    case \"get_devices\": // Changed from get_nodes to get_devices\n        // Retrieve all devices from the global state\n        const devicesData = global.get(\"devices\") || {}; // Changed from nodesData to devicesData\n        msg.payload = devicesData; // Set the devices data as payload\n        msg.topic = \"devices_data\"; // Change the topic for the response\n        node.log(\"Fetched devices: \" + JSON.stringify(devicesData)); // Log the fetched devices\n        return msg; // Ensure to return the message\n\ncase \"add_device\": // Changed from add_node to add_device\n    // Add a new device\n    const allDevices = global.get(\"devices\") || {}; // Retrieve existing devices\n    const allOwners = global.get(\"owners\") || {}; // Retrieve existing owners\n\n    // Check for the presence of required fields\n    if (!payload.name || !payload.ownerName) {\n        node.log(\"Device Name or Owner Name is missing\");  // Log an error if required fields are missing\n        return { topic: \"device_error\", payload: { error: \"Device Name and Owner Name are required.\" } }; // Return error feedback\n    }\n\n    // Ensure device name is unique \n    const deviceId = payload.name; // Use name as the unique identifier\n    if (!allDevices[deviceId]) {\n        allDevices[deviceId] = { // Changed from node to device\n            deviceName: payload.name, // Add the device name to the object\n            ownerName: payload.ownerName, // Use ownerName instead of ownerId\n            binaryPins: payload.binaryPins || [],\n            analogPins: payload.analogPins || [],\n            lastSeen: null // Initialize last seen status\n        };\n\n        // Add device to the owner's device list\n        if (allOwners[payload.ownerName]) {\n            // Owner exists, check if the device is already in their list\n            if (!allOwners[payload.ownerName].devices.includes(deviceId)) {\n                allOwners[payload.ownerName].devices.push(deviceId); // Add the device ID only if not already present\n            } else {\n                node.log(\"Device already exists in owner's device list: \" + deviceId); // Log if device is a duplicate\n                return { topic: \"device_error\", payload: { error: \"Device already exists for this owner.\" } }; // Return error feedback\n            }\n        } else {\n            // Error handling if the owner does not exist\n            node.log(\"Owner not found, cannot assign device: \" + payload.ownerName);\n            return { topic: \"device_error\", payload: { error: \"Owner not found.\" } }; // Return error feedback\n        }\n\n        global.set(\"devices\", allDevices); // Save updated devices to global context\n        global.set(\"owners\", allOwners); // Save the updated owners to global context\n\n        node.log(\"Added device: \" + deviceId + \" with ownerName: \" + payload.ownerName); // Log the addition\n        node.log(\"Current Devices after adding: \" + JSON.stringify(allDevices)); // Log all devices\n        node.log(\"Current Owners after adding: \" + JSON.stringify(allOwners)); // Log all owners\n        msg.topic = \"device_added\"; // Change the topic for success feedback\n        msg.payload = { \n            deviceId: deviceId, \n            name: payload.name, // Include the device name in the payload response\n            ownerName: payload.ownerName, \n            message: \"Device added successfully.\" \n        };\n    } else {\n        node.log(\"Device name already exists: \" + deviceId); // Log if the device name is not unique\n        return { topic: \"device_error\", payload: { error: \"Device name already exists.\" } }; // Return error feedback\n    }\n    break;\n\n    case \"update_device\": // Changed from update_node to update_device\n        // Update an existing device using its name for identification\n        const devicesToUpdate = global.get(\"devices\") || {}; // Retrieve existing devices\n\n        const currentDeviceId = payload.name; // Device name as unique identifier\n        const currentDevice = devicesToUpdate[currentDeviceId]; // Retrieve the current device\n\n        if (!currentDevice) {\n            node.log(\"Device name not found for update: \" + currentDeviceId); // Log if the device name does not exist\n            return { topic: \"device_error\", payload: { error: \"Device name not found.\" } }; // Return error feedback\n        }\n\n        // Log the current state before updating\n        node.log(\"Current Device before update: \" + JSON.stringify(currentDevice));\n\n        // Update the device's owner name if it has changed\n        if (payload.data.ownerName) {\n            const oldOwnerName = currentDevice.ownerName; // Store the current owner name\n            currentDevice.ownerName = payload.data.ownerName; // Assign new owner name from payload\n\n            // Log the change\n            node.log(\"Updated device owner from \" + oldOwnerName + \" to \" + currentDevice.ownerName);\n        }\n\n        // Assign any other properties to update\n        if (payload.data.binaryPins) {\n            currentDevice.binaryPins = payload.data.binaryPins;\n        }\n        if (payload.data.analogPins) {\n            currentDevice.analogPins = payload.data.analogPins;\n        }\n\n        // Ensure deviceName remains consistent\n        currentDevice.deviceName = currentDevice.deviceName; // Optional, just to ensure it is maintained\n\n        // Update the devices in global context\n        global.set(\"devices\", devicesToUpdate);\n\n        // Log updated structures after the update\n        node.log(\"Updated devices structure after update: \" + JSON.stringify(devicesToUpdate));\n\n        msg.payload = devicesToUpdate; // Return updated device list\n        msg.topic = \"devices_data\"; // Change topic to indicate device data has changed\n        break;\n\n    default:\n        // Log if the topic is unrecognized\n        return null;\n}\n\n// Return the message to the caller\nreturn msg; // This is redundant since every case returns earlier, but kept for clarity.",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 660,
        "wires": [
            [
                "2bef7abf62977ab5"
            ]
        ]
    },
    {
        "id": "2bef7abf62977ab5",
        "type": "ui-template",
        "z": "62f31c6b53afb626",
        "group": "105a8e7c53d8d74f",
        "page": "",
        "ui": "",
        "name": "",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>  \n    <div style=\"width: 100%;\">  \n        <style>  \n            /* Set general font size for all elements within the container */  \n            .v-container {  \n                font-size: 0.75rem;  \n            }  \n            .v-card-title {  \n                font-size: 0.85rem;  \n            }  \n            .v-btn {  \n                font-size: 0.7rem;  \n                padding: 4px 8px;  \n            }  \n            .v-text-field input {  \n                font-size: 0.75rem;  \n                padding: 4px;  \n            }  \n            .v-data-table {  \n                font-size: 0.75rem;  \n            }  \n            .nr-dashboard-cardpanel, .nr-dashboard-template {  \n                width: 100% !important;  \n            }  \n        </style>  \n\n        <v-container fluid class=\"pa-6\" style=\"max-width: 100%; padding: 0;\">  \n            <!-- Main Tabs -->  \n            <v-tabs v-model=\"activeSection\" class=\"mb-6\">  \n                <v-tab value=\"owners\">  \n                    <v-icon class=\"mr-2\">mdi-account-group</v-icon>  \n                    Owner Management  \n                </v-tab>  \n                <v-tab value=\"devices\"> <!-- Changed \"nodes\" to \"devices\" -->  \n                    <v-icon class=\"mr-2\">mdi-router-network</v-icon>  \n                    Device Management  \n                </v-tab>  \n            </v-tabs>  \n\n            <v-window v-model=\"activeSection\">  \n                <!-- Owner Management Tab -->  \n                <v-window-item value=\"owners\">  \n                    <div class=\"mb-4\">  \n                        <h2 class=\"text-h4 mb-6 d-flex align-center\">  \n                            <v-icon class=\"mr-2\" color=\"primary\">mdi-account-group</v-icon>  \n                            Owner Management  \n                        </h2>  \n\n                        <!-- Add New Owner Card -->  \n                        <v-card class=\"mb-6\">  \n                            <v-card-title>  \n                                <v-icon class=\"mr-2\">mdi-account-plus</v-icon>  \n                                Add New Owner  \n                            </v-card-title>  \n                            <v-card-text>  \n                                <v-row>  \n                                    <v-col cols=\"12\" md=\"4\" lg=\"3\">  \n                                        <v-text-field v-model=\"newOwner.name\" label=\"Owner Name\" variant=\"outlined\"  \n                                            density=\"compact\" :error=\"!newOwner.name.trim() && attempted\"  \n                                            :error-messages=\"!newOwner.name.trim() && attempted ? 'Name is required' : ''\">  \n                                        </v-text-field>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" md=\"4\" lg=\"3\">  \n                                        <v-text-field v-model=\"newOwner.email\" label=\"Email\" variant=\"outlined\"  \n                                            density=\"compact\" type=\"email\"></v-text-field>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" md=\"4\" lg=\"3\">  \n                                        <v-text-field v-model=\"newOwner.phone\" label=\"Phone\" variant=\"outlined\"  \n                                            density=\"compact\"></v-text-field>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" lg=\"3\" class=\"d-flex align-center\">  \n                                        <v-btn @click=\"addOwner\" color=\"primary\" :disabled=\"!newOwner.name.trim()\"  \n                                            prepend-icon=\"mdi-plus\" size=\"large\" block>  \n                                            Add Owner  \n                                        </v-btn>  \n                                    </v-col>  \n                                </v-row>  \n                            </v-card-text>  \n                        </v-card>  \n\n                        <!-- Owners List -->  \n                        <v-card>  \n                            <v-card-title class=\"d-flex align-center\">  \n                                <v-icon class=\"mr-2\">mdi-account-group</v-icon>  \n                                Property Owners ({{ filteredOwnersList.length }} of {{ Object.keys(owners).length }})  \n                                <v-spacer></v-spacer>  \n                                <v-text-field v-model=\"ownerSearchFilter\" label=\"Search owners...\"  \n                                    prepend-inner-icon=\"mdi-magnify\" variant=\"outlined\" density=\"compact\" hide-details  \n                                    clearable style=\"max-width: 400px;\" class=\"ml-4\"></v-text-field>  \n                            </v-card-title>  \n\n                            <v-data-table :headers=\"ownerHeaders\" :items=\"filteredOwnersList\" class=\"elevation-0\"  \n                                density=\"compact\" :items-per-page=\"20\">  \n                                <template v-slot:item.deviceCount=\"{ item }\">  \n                                    <v-chip size=\"small\" :color=\"item.deviceCount > 0 ? 'success' : 'default'\">  \n                                        {{ item.deviceCount }}  \n                                    </v-chip>  \n                                </template>  \n\n                                <template v-slot:item.actions=\"{ item }\">  \n                                    <v-btn icon=\"mdi-pencil\" size=\"small\" variant=\"text\" @click=\"editOwner(item)\">  \n                                    </v-btn>  \n                                    <v-btn icon=\"mdi-delete\" size=\"small\" variant=\"text\" color=\"error\"  \n                                        @click=\"deleteOwner(item.name)\"></v-btn>  \n                                </template>  \n                            </v-data-table>  \n                        </v-card>  \n                    </div>  \n                </v-window-item>  \n\n                <!-- Device Management Tab -->  \n                <v-window-item value=\"devices\">  \n                    <div class=\"mb-4\">  \n                        <h2 class=\"text-h4 mb-6 d-flex align-center\">  \n                            <v-icon class=\"mr-2\" color=\"success\">mdi-router-network</v-icon>  \n                            Device Management  \n                        </h2>  \n\n                        <!-- Add New Device Card -->  \n                        <v-card class=\"mb-6\">  \n                            <v-card-title>  \n                                <v-icon class=\"mr-2\">mdi-chip</v-icon>  \n                                Add New Device  \n                            </v-card-title>  \n                            <v-card-text>  \n                                <v-row class=\"mb-4\">  \n                                    <v-col cols=\"12\" md=\"3\" lg=\"2\">  \n                                        <v-text-field v-model=\"newDevice.name\" label=\"Device Name\" variant=\"outlined\"  \n                                            density=\"compact\" :error=\"!!errorMessage\"  \n                                            :error-messages=\"errorMessage\" @input=\"clearError\"></v-text-field>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" md=\"3\" lg=\"3\">  \n                                        <v-autocomplete v-model=\"newDevice.ownerName\" :items=\"ownerOptions\" label=\"Owner\"   \n                                            variant=\"outlined\" density=\"compact\" clearable :filter-keys=\"['title']\">  \n                                        </v-autocomplete>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" md=\"3\" lg=\"4\" class=\"d-flex align-center\">  \n                                        <v-btn @click=\"addDevice\" color=\"primary\" :disabled=\"!canAddDevice\"  \n                                            prepend-icon=\"mdi-plus\" size=\"large\" block>  \n                                            Add Device  \n                                        </v-btn>  \n                                    </v-col>  \n                                </v-row>  \n\n                                <!-- Basic Pin Configuration -->  \n                                <v-card variant=\"outlined\" class=\"mb-4\">  \n                                    <v-card-title class=\"text-h6\">Basic Pin Labels</v-card-title>  \n                                    <v-card-text>  \n                                        <v-tabs v-model=\"activeTab\">  \n                                            <v-tab value=\"binary\">Binary Pins (8)</v-tab>  \n                                            <v-tab value=\"analog\">Analog Pins (4)</v-tab>  \n                                        </v-tabs>  \n\n                                        <v-window v-model=\"activeTab\" class=\"mt-4\">  \n                                            <v-window-item value=\"binary\">  \n                                                <v-row>  \n                                                    <v-col v-for=\"i in 8\" :key=\"'bin-' + i\" cols=\"12\" sm=\"6\" md=\"3\"  \n                                                        lg=\"2\" xl=\"1-5\">  \n                                                        <v-text-field v-model=\"newDevice.binaryPins[i - 1]\"  \n                                                            :label=\"`Binary Pin ${i - 1}`\" variant=\"outlined\"  \n                                                            density=\"compact\" :placeholder=\"`Pin ${i - 1} Label`\">  \n                                                        </v-text-field>  \n                                                    </v-col>  \n                                                </v-row>  \n                                            </v-window-item>  \n\n                                            <v-window-item value=\"analog\">  \n                                                <v-row>  \n                                                    <v-col v-for=\"i in 4\" :key=\"'ana-' + i\" cols=\"12\" sm=\"6\" md=\"3\"  \n                                                        lg=\"2\">  \n                                                        <v-text-field v-model=\"newDevice.analogPins[i - 1]\"  \n                                                            :label=\"`Analog Pin ${i - 1}`\" variant=\"outlined\"  \n                                                            density=\"compact\" :placeholder=\"`Pin A${i - 1} Label`\">  \n                                                        </v-text-field>  \n                                                    </v-col>  \n                                                </v-row>  \n                                            </v-window-item>  \n                                        </v-window>  \n                                    </v-card-text>  \n                                </v-card>  \n                            </v-card-text>  \n                        </v-card>  \n\n                        <!-- Device Filter Controls -->  \n                        <v-card class=\"mb-6\">  \n                            <v-card-title>Filter & Search Devices</v-card-title>  \n                            <v-card-text>  \n                                <v-row>  \n                                    <v-col cols=\"12\" md=\"6\" lg=\"4\">  \n                                        <v-text-field v-model=\"deviceSearchQuery\" label=\"Search Devices\"  \n                                            prepend-inner-icon=\"mdi-magnify\" variant=\"outlined\" density=\"compact\"  \n                                            clearable hint=\"Search by Device Name or Owner\"></v-text-field>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" md=\"6\" lg=\"4\">  \n                                        <v-autocomplete v-model=\"selectedOwnerFilter\" :items=\"ownerFilterOptions\"  \n                                            label=\"Filter by Owner\" prepend-inner-icon=\"mdi-account-filter\"  \n                                            variant=\"outlined\" density=\"compact\" clearable :filter-keys=\"['title']\">  \n                                        </v-autocomplete>  \n                                    </v-col>  \n                                    <v-col cols=\"12\" lg=\"4\" class=\"d-flex align-center\">  \n                                        <v-chip class=\"mr-2\" color=\"info\">  \n                                            Total: {{ Object.keys(devices).length }}  \n                                        </v-chip>  \n                                        <v-chip color=\"success\">  \n                                            Filtered: {{ filteredDevicesList.length }}  \n                                        </v-chip>  \n                                    </v-col>  \n                                </v-row>  \n                            </v-card-text>  \n                        </v-card>  \n\n                        <!-- Devices Data Table -->  \n<v-card>  \n    <v-card-title>  \n        <v-icon class=\"mr-2\">mdi-router-network</v-icon>  \n        Registered Devices ({{ filteredDevicesList.length }} of {{ Object.keys(devices).length }})  \n    </v-card-title>  \n\n    <v-data-table :headers=\"deviceHeaders\" :items=\"filteredDevicesList\" class=\"elevation-0\"   \n        density=\"compact\" :items-per-page=\"20\">  \n\n        <!-- Display Device Name in the Devices Table -->\n        <template v-slot:item.name=\"{ item }\">  \n            <v-chip size=\"small\" color=\"info\">{{ item.name }}</v-chip> <!-- Display the device name -->\n        </template>  \n\n        <!-- Display Owner in the Devices Table -->\n        <template v-slot:item.ownerName=\"{ item }\">  \n            <v-chip size=\"small\" color=\"primary\">{{ item.ownerName }}</v-chip> <!-- Display the ownerName -->\n        </template>  \n\n        <template v-slot:item.pins=\"{ item }\">  \n            <div>  \n                <v-chip size=\"small\" color=\"success\" class=\"mr-1\">  \n                    B: {{ getBinaryPinCount(item) }}/8  \n                </v-chip>  \n                <v-chip size=\"small\" color=\"info\">  \n                    A: {{ getAnalogPinCount(item) }}/4  \n                </v-chip>  \n            </div>  \n        </template>  \n\n        <template v-slot:item.lastSeen=\"{ item }\">  \n            <span :class=\"item.lastSeen ? 'text-success' : 'text-error'\">  \n                {{ item.lastSeen ? formatDate(item.lastSeen) : 'Never' }}  \n            </span>  \n        </template>  \n\n        <template v-slot:item.actions=\"{ item }\">  \n            <v-btn icon=\"mdi-eye\" size=\"small\" variant=\"text\" @click=\"viewDevice(item)\"></v-btn>  \n            <v-btn icon=\"mdi-pencil\" size=\"small\" variant=\"text\" @click=\"editDevice(item)\"></v-btn>  \n            <v-btn icon=\"mdi-delete\" size=\"small\" variant=\"text\" color=\"error\"  \n                @click=\"deleteDevice(item.name)\"></v-btn>  \n        </template>  \n    </v-data-table>  \n</v-card>\n                    </div>  \n                </v-window-item>  \n            </v-window>  \n        </v-container>  \n\n        <!-- Edit Owner Dialog -->  \n        <v-dialog v-model=\"editOwnerDialog\" max-width=\"600px\">  \n            <v-card>  \n                <v-card-title>Edit Owner</v-card-title>  \n                <v-card-text>  \n                    <v-text-field v-model=\"editingOwner.name\" label=\"Name\" variant=\"outlined\"></v-text-field>  \n                    <v-text-field v-model=\"editingOwner.email\" label=\"Email\" variant=\"outlined\"></v-text-field>  \n                    <v-text-field v-model=\"editingOwner.phone\" label=\"Phone\" variant=\"outlined\"></v-text-field>  \n                </v-card-text>  \n                <v-card-actions>  \n                    <v-spacer></v-spacer>  \n                    <v-btn @click=\"editOwnerDialog = false\">Cancel</v-btn>  \n                    <v-btn @click=\"saveOwner\" color=\"primary\">Save</v-btn>  \n                </v-card-actions>  \n            </v-card>  \n        </v-dialog>  \n\n        <!-- View Device Dialog -->  \n        <v-dialog v-model=\"viewDialog\" max-width=\"1000px\">  \n            <v-card v-if=\"selectedDevice\">  \n                <v-card-title>  \n                    <v-icon class=\"mr-2\">mdi-eye</v-icon>  \n                    Device Details - {{ selectedDevice.name }}  \n                </v-card-title>  \n                <v-card-text>  \n                    <v-row>  \n                        <v-col cols=\"12\" md=\"6\" lg=\"3\">  \n                            <v-text-field :model-value=\"selectedDevice.name\" label=\"Device Name\" variant=\"outlined\" readonly></v-text-field>  \n                        </v-col>  \n                        <v-col cols=\"12\" md=\"6\" lg=\"3\">  \n                            <v-text-field :model-value=\"selectedDevice.ownerName\" label=\"Owner\" variant=\"outlined\" readonly></v-text-field>  \n                        </v-col>  \n                        <v-col cols=\"12\" md=\"6\" lg=\"3\">  \n                            <v-text-field :model-value=\"selectedDevice.lastSeen ? formatDate(selectedDevice.lastSeen) : 'Never'\" label=\"Last Seen\" variant=\"outlined\" readonly></v-text-field>  \n                        </v-col>  \n                    </v-row>  \n\n                    <v-card variant=\"outlined\" class=\"mt-4\">  \n                        <v-card-title>Pin Configuration</v-card-title>  \n                        <v-card-text>  \n                            <v-tabs v-model=\"viewTab\">  \n                                <v-tab value=\"binary\">Binary Pins</v-tab>  \n                                <v-tab value=\"analog\">Analog Pins</v-tab>  \n                            </v-tabs>  \n\n                            <v-window v-model=\"viewTab\" class=\"mt-4\">  \n                                <v-window-item value=\"binary\">  \n                                    <v-row>  \n                                        <v-col v-for=\"(pin, index) in selectedDevice.binaryPins\" :key=\"'view-bin-' + index\" cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\" xl=\"1-5\">  \n                                            <v-text-field :model-value=\"typeof pin === 'string' ? pin : (pin?.label || '')\" :label=\"`Binary Pin ${index}`\" variant=\"outlined\" density=\"compact\" readonly></v-text-field>  \n                                        </v-col>  \n                                    </v-row>  \n                                </v-window-item>  \n\n                                <v-window-item value=\"analog\">  \n                                    <v-row>  \n                                        <v-col v-for=\"(pin, index) in selectedDevice.analogPins\" :key=\"'view-ana-' + index\" cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\">  \n                                            <v-text-field :model-value=\"typeof pin === 'string' ? pin : (pin?.label || '')\" :label=\"`Analog Pin ${index}`\" variant=\"outlined\" density=\"compact\" readonly></v-text-field>  \n                                        </v-col>  \n                                    </v-row>  \n                                </v-window-item>  \n                            </v-window>  \n                        </v-card-text>  \n                    </v-card>  \n                </v-card-text>  \n                <v-card-actions>  \n                    <v-spacer></v-spacer>  \n                    <v-btn @click=\"viewDialog = false\">Close</v-btn>  \n                    <v-btn @click=\"editDevice(selectedDevice)\" color=\"primary\">Edit</v-btn>  \n                </v-card-actions>  \n            </v-card>  \n        </v-dialog>  \n                <!-- Edit Device Dialog -->  \n        <v-dialog v-model=\"editDialog\" max-width=\"1000px\">  \n            <v-card v-if=\"editingDevice\">  \n                <v-card-title>  \n                    <v-icon class=\"mr-2\">mdi-pencil</v-icon>  \n                    Edit Device - {{ editingDevice.name }}  \n                </v-card-title>  \n                <v-card-text>  \n                    <v-row>  \n                        <v-col cols=\"12\" md=\"6\" lg=\"3\">  \n                            <v-text-field v-model=\"editingDevice.name\" label=\"Device Name\" variant=\"outlined\">  \n                            </v-text-field>  \n                        </v-col>  \n                        <v-col cols=\"12\" lg=\"6\">  \n                            <v-autocomplete v-model=\"editingDevice.ownerName\" :items=\"ownerOptions\" label=\"Owner\" <!-- Changed from v-model=\"editingNode.ownerId\" to editingDevice.ownerName -->  \n                                variant=\"outlined\" clearable :filter-keys=\"['title']\"></v-autocomplete>  \n                        </v-col>  \n                    </v-row>\n\n                    <v-card variant=\"outlined\" class=\"mt-4\">  \n                        <v-card-title>Pin Configuration</v-card-title>  \n                        <v-card-text>  \n                            <v-tabs v-model=\"editTab\">  \n                                <v-tab value=\"binary\">Binary Pins</v-tab>  \n                                <v-tab value=\"analog\">Analog Pins</v-tab>  \n                            </v-tabs>  \n\n                            <v-window v-model=\"editTab\" class=\"mt-4\">  \n                                <v-window-item value=\"binary\">  \n                                    <v-row>  \n                                        <v-col v-for=\"(pin, index) in editingDevice.binaryPins\" :key=\"'edit-bin-' + index\"  \n                                            cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\" xl=\"1-5\">  \n                                            <v-text-field v-model=\"editingDevice.binaryPins[index]\"  \n                                                :label=\"`Binary Pin ${index}`\" variant=\"outlined\" density=\"compact\"  \n                                                :placeholder=\"`Pin ${index} Label`\"></v-text-field>  \n                                        </v-col>  \n                                    </v-row>  \n                                </v-window-item>  \n\n                                <v-window-item value=\"analog\">  \n                                    <v-row>  \n                                        <v-col v-for=\"(pin, index) in editingDevice.analogPins\" :key=\"'edit-ana-' + index\"  \n                                            cols=\"12\" sm=\"6\" md=\"3\" lg=\"2\">  \n                                            <v-text-field v-model=\"editingDevice.analogPins[index]\"  \n                                                :label=\"`Analog Pin ${index}`\" variant=\"outlined\" density=\"compact\"  \n                                                :placeholder=\"`Pin A${index} Label`\"></v-text-field>  \n                                        </v-col>  \n                                    </v-row>  \n                                </v-window-item>  \n                            </v-window>  \n                        </v-card-text>  \n                    </v-card>  \n                </v-card-text>  \n                <v-card-actions>  \n                    <v-spacer></v-spacer>  \n                    <v-btn @click=\"editDialog = false\">Cancel</v-btn>  \n                    <v-btn @click=\"saveDevice\" color=\"primary\">Save</v-btn> <!-- Changed from saveNode to saveDevice -->  \n                </v-card-actions>  \n            </v-card>  \n        </v-dialog>  \n\n        <!-- Owner Devices Dialog -->  \n        <v-dialog v-model=\"ownerDevicesDialog\" max-width=\"1200px\">  \n            <v-card v-if=\"selectedOwner\">  \n                <v-card-title>  \n                    <v-icon class=\"mr-2\">mdi-account-circle</v-icon>  \n                    Devices for {{ selectedOwner.name }} <!-- Change from Nodes to Devices -->  \n                </v-card-title>  \n                <v-card-text>  \n                    <v-data-table :headers=\"deviceHeaders.slice(0, -2)\" :items=\"ownerDevices\" class=\"elevation-0\"  \n                        density=\"compact\" :items-per-page=\"15\">  \n                        <template v-slot:item.pins=\"{ item }\">  \n                            <div>  \n                                <v-chip size=\"small\" color=\"success\" class=\"mr-1\">  \n                                    B: {{ getBinaryPinCount(item) }}/8  \n                                </v-chip>  \n                                <v-chip size=\"small\" color=\"info\">  \n                                    A: {{ getAnalogPinCount(item) }}/4  \n                                </v-chip>  \n                            </div>  \n                        </template>  \n\n                        <template v-slot:item.lastSeen=\"{ item }\">  \n                            <span :class=\"item.lastSeen ? 'text-success' : 'text-error'\">  \n                                {{ item.lastSeen ? formatDate(item.lastSeen) : 'Never' }}  \n                            </span>  \n                        </template>  \n                    </v-data-table>  \n                </v-card-text>  \n                <v-card-actions>  \n                    <v-spacer></v-spacer>  \n                    <v-btn @click=\"ownerDevicesDialog = false\">Close</v-btn>  \n                </v-card-actions>  \n            </v-card>  \n        </v-dialog>  \n    </div>  \n</template>\n\n\n\n\n<script>\nexport default {\n    data() {\n        console.log(\"**** STARTING\");\n        return {\n            activeSection: 'owners', // Default to owners tab\n            \n            // Owner data\n            owners: {},\n            attempted: false,\n            ownerSearchFilter: '',\n            newOwner: {\n                name: '',  // Unique identifier and display name\n                email: '',\n                phone: ''\n            },\n            editOwnerDialog: false,\n            editingOwner: {},\n            ownerHeaders: [\n                { title: 'Name', key: 'name' },  // Unique name for owners\n                { title: 'Email', key: 'email' },\n                { title: 'Phone', key: 'phone' },\n                { title: 'Devices', key: 'deviceCount' }, // Change to Devices\n                { title: 'Actions', key: 'actions', sortable: false }\n            ],\n            \n            // Device data\n            devices: {},  // Data structure for devices\n            errorMessage: '',\n            deviceSearchQuery: '',  // Search query for devices\n            selectedOwnerFilter: null,\n            activeTab: 'binary',\n            viewTab: 'binary',\n            editTab: 'binary',\n            viewDialog: false,\n            editDialog: false,\n            ownerDevicesDialog: false,  // Dialog to show devices owned by the selected owner\n            selectedDevice: null,  // Device selected for viewing\n            editingDevice: null,    // Device selected for editing\n            selectedOwner: null,\n            newDevice: {  // New device input fields\n                name: '',  // Unique name for the device\n                binaryPins: Array(8).fill(''),\n                analogPins: Array(4).fill('')\n            },\n            deviceHeaders: [  // Table headers for devices\n                { title: 'Name', key: 'name' },  // Unique name for devices\n                { title: 'Owner', key: 'ownerName' },  // Unique name for devices\n                { title: 'Pins', key: 'pins', width: '140px' },\n                { title: 'Last Seen', key: 'lastSeen' },\n                { title: 'Actions', key: 'actions', sortable: false }\n            ]\n        }\n    },\n    \n    computed: {\n        // Owner computeds\n        ownersList() {\n            return Object.entries(this.owners).map(([name, owner]) => ({\n                name,  // Use name as key and display name\n                ...owner,\n                deviceCount: owner.devices ? owner.devices.length : 0  // Count devices owned\n            }));\n        },\n        \n        filteredOwnersList() {\n            if (!this.ownerSearchFilter) return this.ownersList;\n            \n            const filter = this.ownerSearchFilter.toLowerCase();\n            return this.ownersList.filter(owner => \n                owner.name.toLowerCase().includes(filter) ||\n                (owner.email && owner.email.toLowerCase().includes(filter)) ||\n                (owner.phone && owner.phone.includes(filter))\n            );\n        },\n        \n        // Device computeds\n        ownerOptions() {\n                console.log(\"********* owners data: \" + JSON.stringify(this.owners, null, 2)); \n\n            // Map over the owners to create dropdown options\n            const options = Object.entries(this.owners).map(([ownerKey, owner]) => ({\n                title: owner.name,   // Use the name property for display\n                value: ownerKey      // Use the unique key as the identifier\n            }));\n\n            console.log(\"********* Owner options: \", options); \n            return options;\n        },\n        \n        ownerFilterOptions() {\n            return [\n                { title: 'All Owners', value: null },\n                ...this.ownerOptions\n            ];\n        },\n        \n        devicesList() {  // Returns list of devices\n            return Object.values(this.devices);\n        },\n        \n        filteredDevicesList() {  // Filters the device list based on search query\n            let filtered = this.devicesList;\n            \n            if (this.deviceSearchQuery && this.deviceSearchQuery.trim()) {  // Check for search input\n                const query = this.deviceSearchQuery.trim().toLowerCase();\n                filtered = filtered.filter(device => {  // Filter devices by name\n                    const deviceName = (device.name || '').toLowerCase();  // Use name for filtering\n                    \n                    return deviceName.includes(query);  // Simple name-based filtering\n                });\n            }\n            \n            if (this.selectedOwnerFilter) {\n                filtered = filtered.filter(device => device.ownerName === this.selectedOwnerFilter);\n            }\n            \n            return filtered;\n        },\n        \n        ownerDevices() {  // Returns devices owned by the selected owner\n            if (!this.selectedOwner) return [];\n            return this.devicesList.filter(device => device.ownerName === this.selectedOwner.name);\n        },\n        \n        canAddDevice() {  // Checks if we can add a new device\n            return this.newDevice.name && this.newDevice.name.trim();  // Ensure name is filled\n        }\n    },\n    \n    methods: {\n        // Owner methods\n        addOwner() {\n            this.attempted = true;\n            \n            if (!this.newOwner.name.trim()) return;  // Ensure name is filled to add owner\n\n            // Send request to add new owner\n            this.send({\n                topic: \"add_owner\",\n                payload: {\n                    name: this.newOwner.name.trim(),\n                    email: this.newOwner.email.trim(),\n                    phone: this.newOwner.phone.trim()\n                }\n            });\n            \n            // Reset new owner fields\n            this.newOwner = { name: '', email: '', phone: '' };\n            this.attempted = false;\n        },\n        \n        editOwner(owner) {\n            this.editingOwner = { ...owner };  // Copy selected owner for editing\n            this.editOwnerDialog = true;\n        },\n        \n        saveOwner() {\n            this.send({\n                topic: \"update_owner\",\n                payload: {\n                    name: this.editingOwner.name,  // Ensure we send the name\n                    email: this.editingOwner.email,\n                    phone: this.editingOwner.phone,\n                    devices: this.owners[this.editingOwner.name].devices || []  // Using name as key\n                }\n            });\n            this.editOwnerDialog = false;\n        },\n        \n        deleteOwner(ownerName) {  // Use name for deletion\n            const owner = this.owners[ownerName];  // Find the owner by name\n            const deviceCount = owner.devices ? owner.devices.length : 0;\n            \n            const message = deviceCount > 0 \n                ? `Owner \"${owner.name}\" has ${deviceCount} devices. Delete anyway?`  // Change to devices\n                : `Delete owner \"${owner.name}\"?`;\n                \n            if (confirm(message)) {\n                this.send({\n                    topic: \"delete_owner\", \n                    payload: ownerName // Pass the name to delete\n                });\n            }\n        },\n        \n        // Device methods\n        addDevice() {  // Adds a new device\n            if (!this.canAddDevice) return;  // Check if device can be added\n            \n            this.errorMessage = '';\n            \n            // Send the new device to be added\n            this.send({\n                topic: \"add_device\",  // New message to server to add a device\n                payload: {\n                    name: this.newDevice.name.trim(),  // Use name for identification\n                    ownerName: this.newDevice.ownerName, // Include owner name\n                    binaryPins: this.newDevice.binaryPins,\n                    analogPins: this.newDevice.analogPins\n                }\n            });\n            \n            // Reset new device fields\n            this.newDevice = {\n                name: '',\n                binaryPins: Array(8).fill(''),\n                analogPins: Array(4).fill('')\n            };\n        },\n        \n        viewDevice(device) {  // View selected device detailed information\n            this.selectedDevice = device;\n            this.viewDialog = true;\n            this.viewTab = 'binary';\n        },\n        \n        editDevice(device) {  // Edit device information\n            this.editingDevice = {\n                ...device,\n                binaryPins: [...(device.binaryPins || Array(8).fill(''))],\n                analogPins: [...(device.analogPins || Array(4).fill(''))]\n            };\n            \n            while (this.editingDevice.binaryPins.length < 8) {\n                this.editingDevice.binaryPins.push('');\n            }\n            while (this.editingDevice.analogPins.length < 4) {\n                this.editingDevice.analogPins.push('');\n            }\n            \n            this.editDialog = true;\n            this.editTab = 'binary';\n            this.viewDialog = false;\n        },\n        \n        saveDevice() {  // Save updated device information\n            this.send({\n                topic: \"update_device\",  // New topic for updating devices\n                payload: {\n                    name: this.editingDevice.name,  // Use name for updating\n                    ownerName: this.editingDevice.ownerName, // Include updated owner name\n                    binaryPins: this.editingDevice.binaryPins,\n                    analogPins: this.editingDevice.analogPins,\n                    lastSeen: this.editingDevice.lastSeen\n                }\n            });\n            this.editDialog = false;\n        },\n        \n        deleteDevice(deviceName) {  // Delete a device using its name\n            if (confirm(`Delete device \"${deviceName}\"?`)) {\n                this.send({\n                    topic: \"delete_device\",  // New message to server to delete the specified device\n                    payload: deviceName // Pass the name to delete\n                });\n            }\n        },\n        \n        showOwnerDevices(ownerName) {  // Show devices owned by the selected owner\n            this.selectedOwner = { \n                name: ownerName, \n                ...this.owners[ownerName] \n            };\n            this.ownerDevicesDialog = true;\n        },\n        \n        // Utility methods\n        formatDate(dateStr) {  // Format dates for display\n            return new Date(dateStr).toLocaleString();\n        },\n        \n        clearError() {\n            this.errorMessage = '';  // Clear any error messages\n        },\n        \n        getBinaryPinCount(item) {  // Count non-empty binary pins\n            if (!item.binaryPins) return 0;\n            return item.binaryPins.filter(pin => pin && pin.trim()).length;\n        },\n        \n        getAnalogPinCount(item) {  // Count non-empty analog pins\n            if (!item.analogPins) return 0;\n            return item.analogPins.filter(pin => pin && pin.trim()).length;\n        }\n    },\n    \n    mounted() {\n        this.send({ topic: \"get_owners\" });  // Request owners from the server\n        this.send({ topic: \"get_devices\" });  // Request devices from the server\n    },\n    \n    watch: {\n        msg: {\n            handler(newMsg) {\n                if (newMsg && newMsg.topic === \"owners_data\") {\n                    this.owners = newMsg.payload || {};  // Set owners data received from the server\n                } else if (newMsg && newMsg.topic === \"devices_data\") {  // Handle devices data\n                    this.devices = newMsg.payload || {};  // Set devices data\n                } else if (newMsg && newMsg.topic === \"device_error\") {  // Handle device-related errors\n                    this.errorMessage = newMsg.payload.error;\n                } else if (newMsg && newMsg.topic === \"device_added\") {  // Device added successfully\n                    this.devices = { ...this.devices, [newMsg.payload.name]: newMsg.payload };\n                    this.errorMessage = '';\n                    // Refresh the owners list with device association (if it isn't already managed by another mechanism)\n                    if (this.owners[newMsg.payload.ownerName]) {\n                        // Add the device to the existing owner's devices\n                        if (!this.owners[newMsg.payload.ownerName].devices.includes(newMsg.payload.deviceId)) {\n                            this.owners[newMsg.payload.ownerName].devices.push(newMsg.payload.deviceId);\n                        }\n                    }\n                } else if (newMsg && newMsg.topic === \"device_updated\") {  // Device updated successfully\n                    this.devices = { ...this.devices, [newMsg.payload.name]: newMsg.payload };\n                } else if (newMsg && newMsg.topic === \"device_deleted\") {  // Device deleted successfully\n                    const updatedDevices = { ...this.devices };\n                    delete updatedDevices[newMsg.payload];  // Remove device from the list\n                    this.devices = updatedDevices;\n                } else if (newMsg && newMsg.topic === \"owner_added\") {\n                    this.owners = { ...this.owners, [newMsg.payload.name]: newMsg.payload };  // Add new owner\n                } else if (newMsg && newMsg.topic === \"owner_updated\") {\n                    this.owners = { ...this.owners, [newMsg.payload.name]: newMsg.payload };  // Update existing owner\n                } else if (newMsg && newMsg.topic === \"owner_deleted\") {\n                    const updatedOwners = { ...this.owners };\n                    delete updatedOwners[newMsg.payload];  // Remove owner from the list\n                    this.owners = updatedOwners;\n                }\n            },\n            deep: true\n        }\n    }\n}\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1300,
        "y": 240,
        "wires": [
            [
                "03b8ce6774a2abb5",
                "7100665dc8d8ec55"
            ]
        ]
    },
    {
        "id": "1dd74ca63fa183e2",
        "type": "inject",
        "z": "62f31c6b53afb626",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "add_node",
        "payload": "{     \"topic\": \"add_node\",     \"payload\": {         \"nodeId\": \"557\",         \"name\": \"Node Name\",         \"ownerId\": \"ownerId\",         \"binaryPins\": [\"pin1\", \"pin2\"],         \"analogPins\": [\"pinA\", \"pinB\"]     } }",
        "payloadType": "json",
        "x": 1070,
        "y": 440,
        "wires": [
            [
                "7100665dc8d8ec55"
            ]
        ]
    }
]