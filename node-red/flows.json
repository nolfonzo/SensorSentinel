[
    {
        "id": "62f31c6b53afb626",
        "type": "tab",
        "label": "Maintenance Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfe4d76a50650ba0",
        "type": "tab",
        "label": "Alerts Flow",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e8a3445017fb5db9",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b320d858532c1eb7",
        "type": "tab",
        "label": "Testing",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ac73cfbba5e1dcae",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control"
        ],
        "showPathInSidebar": false,
        "headerContent": "page",
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true,
        "allowInstall": true
    },
    {
        "id": "c05b66df7c049376",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "315ea8347fb746b3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "df031482b6ed6ab2",
        "type": "ui-page",
        "name": "Owner & Device Admin",
        "ui": "ac73cfbba5e1dcae",
        "path": "/admin",
        "icon": "home",
        "layout": "grid",
        "theme": "c05b66df7c049376",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "105a8e7c53d8d74f",
        "type": "ui-group",
        "name": "SensorSentinel Admin",
        "page": "df031482b6ed6ab2",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "95576809b9af886f",
        "type": "ui-page",
        "name": "Alerts",
        "ui": "ac73cfbba5e1dcae",
        "path": "/alerts",
        "icon": "home",
        "layout": "grid",
        "theme": "c05b66df7c049376",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "5aa9d9b44198b615",
        "type": "ui-group",
        "name": "SensorSentinel Alerts",
        "page": "95576809b9af886f",
        "width": "12",
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "b98756d1917e8914",
        "type": "ui-page",
        "name": "System",
        "ui": "ac73cfbba5e1dcae",
        "path": "/system",
        "icon": "home",
        "layout": "grid",
        "theme": "c05b66df7c049376",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 3,
        "className": "",
        "visible": true,
        "disabled": false
    },
    {
        "id": "2aac87beefa6189a",
        "type": "ui-group",
        "name": "System",
        "page": "b98756d1917e8914",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "03b8ce6774a2abb5",
        "type": "function",
        "z": "62f31c6b53afb626",
        "name": "Owner Admin",
        "func": "const topic = msg.topic; // Retrieve the topic from the incoming message\nconst payload = msg.payload; // Retrieve the payload containing the necessary data\n\nconst noLogTopics = [\n    \"get_devices\",\n    \"add_device\",\n    \"update_device\",\n    \"devices_data\",\n    \"owners_data\"\n];\n\n// Log incoming messages unless they're in the no-log list\nif (!noLogTopics.includes(topic)) {\n    node.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg)); // Log the whole message\n}\n\nswitch (topic) {\n    case \"get_owners\":\n        // Fetch the list of owners from the global context\n        const owners = global.get(\"owners\") || {};\n        msg.payload = owners; // Set the payload to owners\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        node.log(\"Fetched owners: \" + JSON.stringify(owners)); // Log the owners\n        return msg; // Ensure to return the message\n\n    case \"add_owner\":\n        // Add a new owner\n        const allOwners = global.get(\"owners\") || {};\n\n        // Ensure the owner name is provided and is unique\n        if (!payload.name) {\n            node.log(\"Owner name is missing. Cannot add owner.\"); // Log missing name error\n            return { topic: \"owner_error\", payload: { error: \"Owner name is required.\" } }; // Return error feedback\n        }\n\n        // Check for unique owner name\n        if (allOwners[payload.name]) {\n            node.log(\"Owner name already exists: \" + payload.name); // Log duplicate name error\n            return { topic: \"owner_error\", payload: { error: \"Owner name must be unique.\" } }; // Return error feedback\n        }\n\n        // Create new owner object with name and other details\n        allOwners[payload.name] = {\n            name: payload.name, // Include the name property\n            email: payload.email || \"\",\n            phone: payload.phone || \"\",\n            devices: [], // Initialize associated devices as an empty array\n            created: new Date().toISOString() // Set the creation timestamp\n        };\n\n        global.set(\"owners\", allOwners); // Save updated owners to global context\n        node.log(\"Added owner : \" + payload.name); // Log the newly added owner'        \n        node.log(\"Global should be set to : \" + allOwners); // Log the newly added owner'\n        node.log(\"Global now has : \" + global.get(\"owners\")); // Log the newly added owner\n\n        msg.payload = allOwners; // Set the payload to the updated list of owners\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        return msg; // Ensure to return the message\n\n    case \"update_owner\":\n        // Update an existing owner\n        const ownersToUpdate = global.get(\"owners\") || {};\n        node.log(\"Incoming payload for update: \" + JSON.stringify(payload)); // Log incoming payload\n        if (ownersToUpdate[payload.name]) {\n            node.log(\"Current owners before update: \" + JSON.stringify(ownersToUpdate)); // Log owners state\n\n            // Retain existing properties and update with new data\n            ownersToUpdate[payload.name] = {\n                ...ownersToUpdate[payload.name],\n                ...payload,  // Change from payload.data to payload to ensure all fields are merged correctly\n                updated: new Date().toISOString() // Update the timestamp\n            };\n            global.set(\"owners\", ownersToUpdate); // Save the updated owner info\n\n            node.log(\"Updated owner: \" + JSON.stringify(ownersToUpdate[payload.name])); // Log the update\n            msg.payload = ownersToUpdate[payload.name]; // Send just the updated owner info\n            msg.topic = \"owner_updated\"; // Change to specific topic for the update event\n        } else {\n            node.log(\"Owner name not found: \" + payload.name); // Log if the owner name does not exist\n            return { topic: \"owner_error\", payload: { error: \"Owner name not found.\" } }; // Return error feedback\n        }\n        return msg; // Return message for success\n\n    case \"delete_owner\":\n        // Delete an owner and their associated devices\n        const ownersToDelete = global.get(\"owners\") || {};\n        const devices = global.get(\"devices\") || {}; // Retrieve existing devices\n\n        node.log(\"Trying to delete owner: \" + payload.name); // Log the owner to delete\n        node.log(\"Current owners: \" + JSON.stringify(ownersToDelete)); // Log current owners for debugging\n\n        if (ownersToDelete[payload.name]) {\n            // Get the IDs of devices associated with this owner\n            const ownerDevices = ownersToDelete[payload.name].devices || [];\n\n            // Remove any associated devices from the devices registry\n            ownerDevices.forEach(deviceName => {\n                delete devices[deviceName]; // Remove the device from the global devices object\n            });\n\n            // Update the global devices list\n            global.set(\"devices\", devices);\n\n            // Now delete the owner\n            delete ownersToDelete[payload.name];\n            global.set(\"owners\", ownersToDelete); // Save updated owners\n            node.log(\"Deleted owner: \" + payload.name + \" and their devices\"); // Log the deletion\n        } else {\n            node.log(\"Owner name not found for deletion: \" + payload.name); // Log if the owner name does not exist\n            return { topic: \"owner_error\", payload: { error: \"Owner name not found for deletion.\" } }; // Return error feedback\n        }\n\n        msg.payload = ownersToDelete; // Set payload to the updated owner list\n        msg.topic = \"owners_data\"; // Change the topic for the response\n        return msg; // Return message for success\n\n    default:\n        // Log if the topic is unrecognized\n        return null;\n}\n\n// Return the message to the caller (redundant since every case returns earlier)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 640,
        "wires": [
            [
                "2bef7abf62977ab5"
            ]
        ]
    },
    {
        "id": "7100665dc8d8ec55",
        "type": "function",
        "z": "62f31c6b53afb626",
        "name": "Device Admin",
        "func": "const topic = msg.topic;\nconst payload = msg.payload;\n\nconst noLogTopics = [\n    \"get_owners\",\n    \"add_owner\", \n    \"update_owner\",\n    \"delete_owner\",\n    \"devices_data\",\n    \"owners_data\"\n];\n\nif (!noLogTopics.includes(topic)) {\n    node.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg));\n}\n\nswitch (topic) {\n    case \"get_devices\":\n        const devicesData = global.get(\"devices\") || {};\n        msg.payload = devicesData;\n        msg.topic = \"devices_data\";\n        node.log(\"Fetched devices: \" + JSON.stringify(devicesData));\n        return msg;\n\n    case \"add_device\":\n        const allDevices = global.get(\"devices\") || {};\n        const allOwners = global.get(\"owners\") || {};\n\n        // Ensure required fields are present\n        if (!payload.nodeId || !payload.displayName || !payload.ownerName) {\n            node.log(\"Node ID, Display Name, or Owner Name is missing.\");\n            return { topic: \"device_error\", payload: { error: \"Node ID, Display Name, and Owner Name are required.\" } };\n        }\n\n        // Ensure node ID is unique (this is the immutable identifier)\n        if (!allDevices[payload.nodeId]) {\n            // Initialize pin structures with proper defaults\n            const defaultBinaryPins = Array(8).fill(null).map((_, index) => ({\n                label: payload.binaryPins && payload.binaryPins[index] ? payload.binaryPins[index].label || \"\" : \"\",\n                trigger: payload.binaryPins && payload.binaryPins[index] ? payload.binaryPins[index].trigger || \"High\" : \"High\",\n                alertLevel: payload.binaryPins && payload.binaryPins[index] ? payload.binaryPins[index].alertLevel || \"None\" : \"None\"\n            }));\n\n            const defaultAnalogPins = Array(4).fill(null).map((_, index) => ({\n                value: payload.analogPins && payload.analogPins[index] ? payload.analogPins[index].value || \"\" : \"\",\n                lowThreshold: payload.analogPins && payload.analogPins[index] ? payload.analogPins[index].lowThreshold || 0 : 0,\n                highThreshold: payload.analogPins && payload.analogPins[index] ? payload.analogPins[index].highThreshold || 100 : 100,\n                alertLevel: payload.analogPins && payload.analogPins[index] ? payload.analogPins[index].alertLevel || \"None\" : \"None\"\n            }));\n\n            allDevices[payload.nodeId] = {\n                nodeId: payload.nodeId,           // Immutable unique identifier\n                displayName: payload.displayName, // User-friendly name (can be changed)\n                ownerName: payload.ownerName,\n                binaryPins: defaultBinaryPins,\n                analogPins: defaultAnalogPins,\n                lastSeen: null\n            };\n\n            // Add device to the owner's device list using nodeId\n            if (allOwners[payload.ownerName]) {\n                if (!allOwners[payload.ownerName].devices.includes(payload.nodeId)) {\n                    allOwners[payload.ownerName].devices.push(payload.nodeId);\n                } else {\n                    node.log(\"Device already exists in owner's device list: \" + payload.nodeId);\n                    return { topic: \"device_error\", payload: { error: \"Device already exists for this owner.\" } };\n                }\n            } else {\n                node.log(\"Owner not found, cannot assign device: \" + payload.ownerName);\n                return { topic: \"device_error\", payload: { error: \"Owner not found.\" } };\n            }\n\n            global.set(\"devices\", allDevices);\n            global.set(\"owners\", allOwners);\n\n            node.log(\"Added device: \" + JSON.stringify(allDevices[payload.nodeId]));\n\n            msg.topic = \"device_added\";\n            msg.payload = allDevices[payload.nodeId];\n        } else {\n            node.log(\"Node ID already exists: \" + payload.nodeId);\n            return { topic: \"device_error\", payload: { error: \"Node ID already exists.\" } };\n        }\n        break;\n\n    case \"update_device\":\n        const devicesToUpdate = global.get(\"devices\") || {};\n        const ownersToUpdate = global.get(\"owners\") || {};\n\n        const currentNodeId = payload.nodeId; // Use nodeId as the immutable key\n        const currentDevice = devicesToUpdate[currentNodeId];\n\n        if (!currentDevice) {\n            node.log(\"Node ID not found for update: \" + currentNodeId);\n            return { topic: \"device_error\", payload: { error: \"Node ID not found.\" } };\n        }\n\n        node.log(\"Current Device before update: \" + JSON.stringify(currentDevice));\n\n        // Update display name (this can change)\n        if (payload.displayName) {\n            currentDevice.displayName = payload.displayName;\n            node.log(\"Updated display name to: \" + payload.displayName);\n        }\n\n        // Update the device's owner name if it has changed\n        if (payload.ownerName && payload.ownerName !== currentDevice.ownerName) {\n            const oldOwnerName = currentDevice.ownerName;\n            currentDevice.ownerName = payload.ownerName;\n\n            node.log(\"Updated device owner from \" + oldOwnerName + \" to \" + currentDevice.ownerName);\n            \n            // Remove device from old owner's device list using nodeId\n            if (oldOwnerName && ownersToUpdate[oldOwnerName]) {\n                const oldOwnerDevices = ownersToUpdate[oldOwnerName].devices;\n                const index = oldOwnerDevices.indexOf(currentNodeId);\n                if (index > -1) {\n                    oldOwnerDevices.splice(index, 1);\n                    node.log(\"Removed device from old owner: \" + oldOwnerName);\n                }\n            }\n            \n            // Add device to the new owner's list using nodeId\n            if (ownersToUpdate[currentDevice.ownerName]) {\n                if (!ownersToUpdate[currentDevice.ownerName].devices.includes(currentNodeId)) {\n                    ownersToUpdate[currentDevice.ownerName].devices.push(currentNodeId);\n                    node.log(\"Added device to new owner: \" + currentDevice.ownerName);\n                }\n            }\n        }\n\n        // Update pin configurations if provided\n        if (payload.binaryPins) {\n            currentDevice.binaryPins = payload.binaryPins;\n        }\n        if (payload.analogPins) {\n            currentDevice.analogPins = payload.analogPins;\n        }\n\n        global.set(\"devices\", devicesToUpdate);\n        global.set(\"owners\", ownersToUpdate);\n\n        node.log(\"Updated devices structure after update: \" + JSON.stringify(devicesToUpdate));\n\n        msg.payload = devicesToUpdate;\n        msg.topic = \"devices_data\";\n        return msg;\n\n    case \"delete_device\":\n        const remainingDevices = global.get(\"devices\") || {};\n        const remainingOwners = global.get(\"owners\") || {};\n\n        const deviceToDeleteNodeId = payload.nodeId; // Use nodeId for deletion\n        const deviceToDelete = remainingDevices[deviceToDeleteNodeId];\n\n        if (!deviceToDelete) {\n            node.log(\"Node ID not found for deletion: \" + deviceToDeleteNodeId);\n            return { topic: \"device_error\", payload: { error: \"Node ID not found.\" } };\n        }\n\n        // Remove device from owner's device list using nodeId\n        const deviceOwnerName = deviceToDelete.ownerName;\n        if (deviceOwnerName && remainingOwners[deviceOwnerName]) {\n            const ownerDevices = remainingOwners[deviceOwnerName].devices;\n            const index = ownerDevices.indexOf(deviceToDeleteNodeId);\n            if (index > -1) {\n                ownerDevices.splice(index, 1);\n                node.log(\"Removed device from owner's list: \" + deviceOwnerName);\n            }\n        }\n\n        delete remainingDevices[deviceToDeleteNodeId];\n\n        global.set(\"devices\", remainingDevices);\n        global.set(\"owners\", remainingOwners);\n        \n        node.log(\"Deleted device: \" + deviceToDeleteNodeId);\n\n        msg.payload = { message: \"Device deleted successfully.\", nodeId: deviceToDeleteNodeId };\n        msg.topic = \"device_deleted\";\n        return msg;\n\n    default:\n        return null;\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 640,
        "wires": [
            [
                "2bef7abf62977ab5"
            ]
        ]
    },
    {
        "id": "2bef7abf62977ab5",
        "type": "ui-template",
        "z": "62f31c6b53afb626",
        "group": "105a8e7c53d8d74f",
        "page": "",
        "ui": "",
        "name": "Admin Template",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div style=\"width: 100%\">\n    <style>\n      /* Set general font size for all elements within the container */\n      .v-container {\n        font-size: 0.75rem;\n      }\n\n      .v-card-title {\n        font-size: 0.85rem;\n      }\n\n      .v-btn {\n        font-size: 0.7rem;\n        padding: 4px 8px;\n      }\n\n      .v-text-field input {\n        font-size: 0.75rem;\n        padding: 4px;\n      }\n\n      .v-data-table {\n        font-size: 0.75rem;\n      }\n\n      .nr-dashboard-cardpanel,\n      .nr-dashboard-template {\n        width: 100% !important;\n      }\n    </style>\n\n    <v-container fluid class=\"pa-6\" style=\"max-width: 100%; padding: 0\">\n      <!-- Main Tabs -->\n      <v-tabs v-model=\"activeSection\" class=\"mb-6\">\n        <v-tab value=\"owners\">\n          <v-icon class=\"mr-2\">mdi-account-group</v-icon>\n          Owner Management\n        </v-tab>\n        <v-tab value=\"devices\">\n          <v-icon class=\"mr-2\">mdi-router-network</v-icon>\n          Device Management\n        </v-tab>\n      </v-tabs>\n\n      <v-window v-model=\"activeSection\">\n        <!-- Owner Management Tab -->\n        <v-window-item value=\"owners\">\n          <div class=\"mb-4\">\n            <h2 class=\"text-h4 mb-6 d-flex align-center\">\n              <v-icon class=\"mr-2\" color=\"primary\">mdi-account-group</v-icon>\n              Owner Management\n            </h2>\n\n            <!-- Add New Owner Card -->\n            <v-card class=\"mb-6\">\n              <v-card-title>\n                <v-icon class=\"mr-2\">mdi-account-plus</v-icon>\n                Add New Owner\n              </v-card-title>\n              <v-card-text>\n                <v-row>\n                  <v-col cols=\"12\" md=\"4\" lg=\"3\">\n                    <v-text-field v-model=\"newOwner.name\" label=\"Owner Name\" variant=\"outlined\" density=\"compact\"\n                      :error=\"!newOwner.name.trim() && attempted\"\n                      :error-messages=\"!newOwner.name.trim() && attempted ? 'Name is required' : ''\">\n                    </v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" md=\"4\" lg=\"3\">\n                    <v-text-field v-model=\"newOwner.email\" label=\"Email\" variant=\"outlined\" density=\"compact\"\n                      type=\"email\"></v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" md=\"4\" lg=\"3\">\n                    <v-text-field v-model=\"newOwner.phone\" label=\"Phone\" variant=\"outlined\" density=\"compact\">\n                    </v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" lg=\"3\" class=\"d-flex align-center\">\n                    <v-btn @click=\"addOwner\" color=\"primary\" :disabled=\"!newOwner.name.trim()\" prepend-icon=\"mdi-plus\"\n                      size=\"large\" block>\n                      Add Owner\n                    </v-btn>\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n\n            <!-- Owners List -->\n            <v-card>\n              <v-card-title class=\"d-flex align-center\">\n                <v-icon class=\"mr-2\">mdi-account-group</v-icon>\n                Property Owners ({{ filteredOwnersList.length }} of {{\n                Object.keys(owners).length }})\n                <v-spacer></v-spacer>\n                <v-text-field v-model=\"ownerSearchFilter\" label=\"Search owners...\" prepend-inner-icon=\"mdi-magnify\"\n                  variant=\"outlined\" density=\"compact\" hide-details clearable style=\"max-width: 400px\" class=\"ml-4\">\n                </v-text-field>\n              </v-card-title>\n\n              <v-data-table :headers=\"ownerHeaders\" :items=\"filteredOwnersList\" class=\"elevation-0\" density=\"compact\"\n                :items-per-page=\"20\">\n                <template v-slot:item.deviceCount=\"{ item }\">\n                  <v-chip size=\"small\" :color=\"item.deviceCount > 0 ? 'success' : 'default'\">\n                    {{ item.deviceCount }}\n                  </v-chip>\n                </template>\n\n                <template v-slot:item.actions=\"{ item }\">\n                  <v-btn icon=\"mdi-pencil\" size=\"small\" variant=\"text\" @click=\"editOwner(item)\">\n                  </v-btn>\n                  <v-btn icon=\"mdi-delete\" size=\"small\" variant=\"text\" color=\"error\" @click=\"deleteOwner(item.name)\">\n                  </v-btn>\n                </template>\n              </v-data-table>\n            </v-card>\n          </div>\n        </v-window-item>\n\n        <!-- Device Management Tab -->\n        <v-window-item value=\"devices\">\n          <div class=\"mb-4\">\n            <h2 class=\"text-h4 mb-6 d-flex align-center\">\n              <v-icon class=\"mr-2\" color=\"success\">mdi-router-network</v-icon>\n              Device Management\n            </h2>\n\n            <!-- Add New Device Card -->\n            <v-card class=\"mb-6\">\n              <v-card-title>\n                <v-icon class=\"mr-2\">mdi-chip</v-icon>\n                Add New Device\n              </v-card-title>\n              <v-card-text>\n                <v-row class=\"mb-4\">\n                  <v-col cols=\"12\" md=\"3\" lg=\"2\">\n                    <v-text-field v-model=\"newDevice.nodeId\" label=\"Node ID\" variant=\"outlined\" density=\"compact\"\n                      hint=\"Unique device identifier\" persistent-hint :error=\"!newDevice.nodeId.trim() && attempted\"\n                      :error-messages=\"!newDevice.nodeId.trim() && attempted ? 'Node ID is required' : ''\"\n                      @input=\"clearError\">\n                    </v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" md=\"3\" lg=\"2\">\n                    <v-text-field v-model=\"newDevice.displayName\" label=\"Display Name\" variant=\"outlined\"\n                      density=\"compact\" hint=\"User-friendly name\" persistent-hint></v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" md=\"3\" lg=\"3\">\n                    <v-autocomplete v-model=\"newDevice.ownerName\" :items=\"ownerOptions\" label=\"Owner\" variant=\"outlined\"\n                      density=\"compact\" clearable :filter-keys=\"['title']\">\n                    </v-autocomplete>\n                  </v-col>\n                </v-row>\n\n                <!-- Add Device Button -->\n                <v-row class=\"mb-4\">\n                  <v-col cols=\"12\" lg=\"4\" class=\"d-flex align-center\">\n                    <v-btn @click=\"addDevice\" color=\"primary\" :disabled=\"!canAddDevice\" prepend-icon=\"mdi-plus\"\n                      size=\"large\" block>\n                      Add Device\n                    </v-btn>\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n\n            <!-- Device Filter Controls -->\n            <v-card class=\"mb-6\">\n              <v-card-title>Filter & Search Devices</v-card-title>\n              <v-card-text>\n                <v-row>\n                  <v-col cols=\"12\" md=\"6\" lg=\"4\">\n                    <v-text-field v-model=\"deviceSearchQuery\" label=\"Search Devices\" prepend-inner-icon=\"mdi-magnify\"\n                      variant=\"outlined\" density=\"compact\" clearable hint=\"Search by Node ID or Display Name\">\n                    </v-text-field>\n                  </v-col>\n                  <v-col cols=\"12\" md=\"6\" lg=\"4\">\n                    <v-autocomplete v-model=\"selectedOwnerFilter\" :items=\"ownerFilterOptions\" label=\"Filter by Owner\"\n                      prepend-inner-icon=\"mdi-account-filter\" variant=\"outlined\" density=\"compact\" clearable\n                      :filter-keys=\"['title']\">\n                    </v-autocomplete>\n                  </v-col>\n                  <v-col cols=\"12\" lg=\"4\" class=\"d-flex align-center\">\n                    <v-chip class=\"mr-2\" color=\"info\">\n                      Total: {{ Object.keys(devices).length }}\n                    </v-chip>\n                    <v-chip color=\"success\">\n                      Filtered: {{ filteredDevicesList.length }}\n                    </v-chip>\n                  </v-col>\n                </v-row>\n              </v-card-text>\n            </v-card>\n\n            <!-- Devices Data Table -->\n            <v-card>\n              <v-card-title>\n                <v-icon class=\"mr-2\">mdi-router-network</v-icon>\n                Registered Devices ({{ filteredDevicesList.length }} of {{\n                Object.keys(devices).length }})\n              </v-card-title>\n\n              <v-data-table :headers=\"deviceHeaders\" :items=\"filteredDevicesList\" class=\"elevation-0\" density=\"compact\"\n                :items-per-page=\"20\">\n                <!-- Display Node ID in the Devices Table -->\n                <template v-slot:item.nodeId=\"{ item }\">\n                  <v-chip size=\"small\" color=\"secondary\">{{ item.nodeId }}</v-chip>\n                </template>\n\n                <!-- Display Display Name in the Devices Table -->\n                <template v-slot:item.displayName=\"{ item }\">\n                  <v-chip size=\"small\" color=\"info\">{{ item.displayName }}</v-chip>\n                </template>\n\n                <!-- Display Owner in the Devices Table -->\n                <template v-slot:item.ownerName=\"{ item }\">\n                  <v-chip size=\"small\" color=\"primary\">{{ item.ownerName }}</v-chip>\n                </template>\n\n                <template v-slot:item.pins=\"{ item }\">\n                  <div>\n                    <v-chip size=\"small\" color=\"success\" class=\"mr-1\">\n                      B: {{ getBinaryPinCount(item) }}/8\n                    </v-chip>\n                    <v-chip size=\"small\" color=\"info\">\n                      A: {{ getAnalogPinCount(item) }}/4\n                    </v-chip>\n                  </div>\n                </template>\n\n                <template v-slot:item.lastSeen=\"{ item }\">\n                  <span :class=\"item.lastSeen ? 'text-success' : 'text-error'\">\n                    {{ item.lastSeen ? formatDate(item.lastSeen) : 'Never' }}\n                  </span>\n                </template>\n\n                <template v-slot:item.actions=\"{ item }\">\n                  <v-btn icon=\"mdi-eye\" size=\"small\" variant=\"text\" @click=\"viewDevice(item)\"></v-btn>\n                  <v-btn icon=\"mdi-pencil\" size=\"small\" variant=\"text\" @click=\"editDevice(item)\"></v-btn>\n                  <v-btn icon=\"mdi-delete\" size=\"small\" variant=\"text\" color=\"error\" @click=\"deleteDevice(item.nodeId)\">\n                  </v-btn>\n                </template>\n              </v-data-table>\n            </v-card>\n          </div>\n        </v-window-item>\n      </v-window>\n    </v-container>\n\n    <!-- Dialogs below this line -->\n    <!-- Edit Owner Dialog -->\n    <v-dialog v-model=\"editOwnerDialog\" max-width=\"600px\">\n      <v-card>\n        <v-card-title>Edit Owner</v-card-title>\n        <v-card-text>\n          <v-text-field v-model=\"editingOwner.name\" label=\"Name\" variant=\"outlined\"></v-text-field>\n          <v-text-field v-model=\"editingOwner.email\" label=\"Email\" variant=\"outlined\"></v-text-field>\n          <v-text-field v-model=\"editingOwner.phone\" label=\"Phone\" variant=\"outlined\"></v-text-field>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"editOwnerDialog = false\">Cancel</v-btn>\n          <v-btn @click=\"saveOwner\" color=\"primary\">Save</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- View Device Dialog -->\n    <v-dialog v-model=\"viewDialog\" max-width=\"1000px\">\n      <v-card v-if=\"selectedDevice\">\n        <v-card-title>\n          <v-icon class=\"mr-2\">mdi-eye</v-icon>\n          Device Details - {{ selectedDevice.displayName }}\n        </v-card-title>\n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field :model-value=\"selectedDevice.nodeId\" label=\"Node ID\" variant=\"outlined\" readonly>\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field :model-value=\"selectedDevice.displayName\" label=\"Display Name\" variant=\"outlined\" readonly>\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field :model-value=\"selectedDevice.ownerName\" label=\"Owner\" variant=\"outlined\" readonly>\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field :model-value=\"selectedDevice.lastSeen ? formatDate(selectedDevice.lastSeen) : 'Never'\"\n                label=\"Last Seen\" variant=\"outlined\" readonly></v-text-field>\n            </v-col>\n          </v-row>\n\n          <v-card variant=\"outlined\" class=\"mt-4\">\n            <v-card-title>Pin Configuration</v-card-title>\n            <v-card-text>\n              <v-tabs v-model=\"viewTab\">\n                <v-tab value=\"binary\">Binary Pins</v-tab>\n                <v-tab value=\"analog\">Analog Pins</v-tab>\n              </v-tabs>\n\n              <v-window v-model=\"viewTab\" class=\"mt-4\">\n                <v-window-item value=\"binary\">\n                  <v-row>\n                    <v-col v-for=\"(pin, index) in selectedDevice.binaryPins\" :key=\"'view-bin-' + index\" cols=\"12\" sm=\"6\"\n                      md=\"6\">\n                      <v-text-field :model-value=\"pin ? pin.label : ''\" :label=\"`Binary Pin ${index}`\"\n                        variant=\"outlined\" density=\"compact\" readonly></v-text-field>\n                    </v-col>\n                  </v-row>\n                </v-window-item>\n\n                <v-window-item value=\"analog\">\n                  <v-row>\n                    <v-col v-for=\"(pin, index) in selectedDevice.analogPins\" :key=\"'view-ana-' + index\" cols=\"12\" sm=\"6\">\n                      <v-text-field :model-value=\"pin ? pin.value : ''\" :label=\"`Analog Pin ${index}`\"\n                        variant=\"outlined\" density=\"compact\" readonly></v-text-field>\n                    </v-col>\n                  </v-row>\n                </v-window-item>\n              </v-window>\n            </v-card-text>\n          </v-card>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"viewDialog = false\">Close</v-btn>\n          <v-btn @click=\"editDevice(selectedDevice)\" color=\"primary\">Edit</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Edit Device Dialog -->\n    <v-dialog v-model=\"editDialog\" max-width=\"1000px\">\n      <v-card v-if=\"editingDevice\">\n        <v-card-title>\n          <v-icon class=\"mr-2\">mdi-pencil</v-icon>\n          Edit Device - {{ editingDevice.displayName }}\n        </v-card-title>\n        <v-card-text>\n          <v-row>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field v-model=\"editingDevice.nodeId\" label=\"Node ID\" variant=\"outlined\" readonly\n                hint=\"Node ID cannot be changed\" persistent-hint>\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"12\" md=\"6\" lg=\"3\">\n              <v-text-field v-model=\"editingDevice.displayName\" label=\"Display Name\" variant=\"outlined\">\n              </v-text-field>\n            </v-col>\n            <v-col cols=\"12\" lg=\"6\">\n              <v-autocomplete v-model=\"editingDevice.ownerName\" :items=\"ownerOptions\" label=\"Owner\" variant=\"outlined\"\n                clearable :filter-keys=\"['title']\">\n              </v-autocomplete>\n            </v-col>\n          </v-row>\n\n          <v-card variant=\"outlined\" class=\"mt-4\">\n            <v-card-title>Pin Configuration</v-card-title>\n            <v-card-text>\n              <v-tabs v-model=\"editTab\">\n                <v-tab value=\"binary\">Binary Pins</v-tab>\n                <v-tab value=\"analog\">Analog Pins</v-tab>\n              </v-tabs>\n\n              <v-window v-model=\"editTab\" class=\"mt-4\">\n                <v-window-item value=\"binary\">\n                  <v-row>\n                    <v-col v-for=\"(pin, index) in editingDevice.binaryPins\" :key=\"'edit-bin-' + index\" cols=\"12\" sm=\"6\"\n                      md=\"6\">\n                      <v-card class=\"pa-2 mb-2\" outlined>\n                        <v-card-text>\n                          <v-text-field v-model=\"editingDevice.binaryPins[index].label\" :label=\"`Binary Pin ${index}`\"\n                            variant=\"outlined\" density=\"compact\" :placeholder=\"`Pin ${index} Label`\"></v-text-field>\n\n                          <v-select v-model=\"editingDevice.binaryPins[index].trigger\" :items=\"['High', 'Low', 'Change']\"\n                            label=\"Trigger\" variant=\"outlined\" density=\"compact\">\n                          </v-select>\n\n                          <v-select v-model=\"editingDevice.binaryPins[index].alertLevel\"\n                            :items=\"['None', 'Low', 'Medium', 'High']\" label=\"Alert Level\" variant=\"outlined\"\n                            density=\"compact\">\n                          </v-select>\n                        </v-card-text>\n                      </v-card>\n                    </v-col>\n                  </v-row>\n                </v-window-item>\n\n                <v-window-item value=\"analog\">\n                  <v-row>\n                    <v-col v-for=\"(pin, index) in editingDevice.analogPins\" :key=\"'edit-ana-' + index\" cols=\"12\" sm=\"6\"\n                      md=\"6\">\n                      <v-card class=\"pa-2 mb-2\" outlined>\n                        <v-card-text>\n                          <v-text-field v-model=\"editingDevice.analogPins[index].value\" :label=\"`Analog Pin ${index}`\"\n                            variant=\"outlined\" density=\"compact\" :placeholder=\"`Pin A${index} Label`\"></v-text-field>\n\n                          <v-text-field v-model=\"editingDevice.analogPins[index].lowThreshold\" label=\"Low Threshold\"\n                            variant=\"outlined\" density=\"compact\" type=\"number\" placeholder=\"Low Threshold\">\n                          </v-text-field>\n\n                          <v-text-field v-model=\"editingDevice.analogPins[index].highThreshold\" label=\"High Threshold\"\n                            variant=\"outlined\" density=\"compact\" type=\"number\" placeholder=\"High Threshold\">\n                          </v-text-field>\n\n                          <v-select v-model=\"editingDevice.analogPins[index].alertLevel\"\n                            :items=\"['None', 'Low', 'Medium', 'High']\" label=\"Alert Level\" variant=\"outlined\"\n                            density=\"compact\">\n                          </v-select>\n                        </v-card-text>\n                      </v-card>\n                    </v-col>\n                  </v-row>\n                </v-window-item>\n              </v-window>\n            </v-card-text>\n          </v-card>\n        </v-card-text>\n\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"editDialog = false\">Cancel</v-btn>\n          <v-btn @click=\"saveDevice\" color=\"primary\">Save</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n\n    <!-- Owner Devices Dialog -->\n    <v-dialog v-model=\"ownerDevicesDialog\" max-width=\"1200px\">\n      <v-card v-if=\"selectedOwner\">\n        <v-card-title>\n          <v-icon class=\"mr-2\">mdi-account-circle</v-icon>\n          Devices for {{ selectedOwner.name }}\n        </v-card-title>\n        <v-card-text>\n          <v-data-table :headers=\"deviceHeaders.slice(0, -1)\" :items=\"ownerDevices\" class=\"elevation-0\"\n            density=\"compact\" :items-per-page=\"15\">\n            <template v-slot:item.nodeId=\"{ item }\">\n              <v-chip size=\"small\" color=\"secondary\">{{ item.nodeId }}</v-chip>\n            </template>\n\n            <template v-slot:item.displayName=\"{ item }\">\n              <v-chip size=\"small\" color=\"info\">{{ item.displayName }}</v-chip>\n            </template>\n\n            <template v-slot:item.pins=\"{ item }\">\n              <div>\n                <v-chip size=\"small\" color=\"success\" class=\"mr-1\">\n                  B: {{ getBinaryPinCount(item) }}/8\n                </v-chip>\n                <v-chip size=\"small\" color=\"info\">\n                  A: {{ getAnalogPinCount(item) }}/4\n                </v-chip>\n              </div>\n            </template>\n\n            <template v-slot:item.lastSeen=\"{ item }\">\n              <span :class=\"item.lastSeen ? 'text-success' : 'text-error'\">\n                {{ item.lastSeen ? formatDate(item.lastSeen) : 'Never' }}\n              </span>\n            </template>\n          </v-data-table>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"ownerDevicesDialog = false\">Close</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n<script>\n  export default {\n  data() {\n    console.log(\"**** STARTING\");\n    return {\n      activeSection: \"owners\",\n\n      // Owner data\n      owners: {},\n      ownerSearchFilter: \"\",\n      newOwner: {\n        name: \"\",\n        email: \"\",\n        phone: \"\",\n      },\n      editOwnerDialog: false,\n      editingOwner: {},\n      ownerHeaders: [\n        { title: \"Name\", key: \"name\" },\n        { title: \"Email\", key: \"email\" },\n        { title: \"Phone\", key: \"phone\" },\n        { title: \"Devices\", key: \"deviceCount\" },\n        { title: \"Actions\", key: \"actions\", sortable: false },\n      ],\n\n      // Device data\n      devices: {},\n      errorMessage: \"\",\n      deviceSearchQuery: \"\",\n      selectedOwnerFilter: null,\n      activeTab: \"binary\",\n      viewTab: \"binary\",\n      editTab: \"binary\",\n      viewDialog: false,\n      editDialog: false,\n      ownerDevicesDialog: false,\n      selectedDevice: null,\n      editingDevice: null,\n      selectedOwner: null,\n      attempted: false, // Single attempted flag for both owners and devices\n      newDevice: {\n        nodeId: \"\",\n        displayName: \"\",\n        ownerName: \"\",\n        binaryPins: Array(8).fill(\"\"),\n        analogPins: Array(4).fill(\"\"),\n      },\n      deviceHeaders: [\n        { title: \"Node ID\", key: \"nodeId\", width: \"120px\" },\n        { title: \"Display Name\", key: \"displayName\" },\n        { title: \"Owner\", key: \"ownerName\" },\n        { title: \"Pins\", key: \"pins\", width: \"140px\" },\n        { title: \"Last Seen\", key: \"lastSeen\" },\n        { title: \"Actions\", key: \"actions\", sortable: false },\n      ],\n    };\n  },\n\n  computed: {\n\n    ownersList() {\n      return Object.entries(this.owners).map(([name, owner]) => ({\n        name,\n        ...owner,\n        deviceCount: owner.devices ? owner.devices.length : 0,\n      }));\n    },\n\n    filteredOwnersList() {\n      if (!this.ownerSearchFilter) return this.ownersList;\n      const filter = this.ownerSearchFilter.toLowerCase();\n      return this.ownersList.filter(\n        (owner) =>\n          owner.name.toLowerCase().includes(filter) ||\n          (owner.email && owner.email.toLowerCase().includes(filter)) ||\n          (owner.phone && owner.phone.includes(filter))\n      );\n    },\n\n    ownerOptions() {\n      console.log(\"********* owners data:\", JSON.stringify(this.owners, null, 2));\n      \n      const options = Object.entries(this.owners).map(([ownerKey, owner]) => ({\n        title: owner.name,\n        value: owner.name, // Use owner.name as value, not ownerKey\n      }));\n\n      console.log(\"********* Owner options:\", options);\n      return options;\n    },\n\n    ownerFilterOptions() {\n      return [{ title: \"All Owners\", value: null }, ...this.ownerOptions];\n    },\n\n    devicesList() {\n      return Object.values(this.devices);\n    },\n\n    filteredDevicesList() {\n      let filtered = this.devicesList;\n\n      if (this.deviceSearchQuery && this.deviceSearchQuery.trim()) {\n        const query = this.deviceSearchQuery.trim().toLowerCase();\n        filtered = filtered.filter((device) => {\n          const nodeId = (device.nodeId || \"\").toLowerCase();\n          const displayName = (device.displayName || \"\").toLowerCase();\n          return nodeId.includes(query) || displayName.includes(query);\n        });\n      }\n\n      if (this.selectedOwnerFilter) {\n        filtered = filtered.filter(\n          (device) => device.ownerName === this.selectedOwnerFilter\n        );\n      }\n\n      return filtered;\n    },\n\n    ownerDevices() {\n      if (!this.selectedOwner) return [];\n      return this.devicesList.filter(\n        (device) => device.ownerName === this.selectedOwner.name\n      );\n    },\n\n    canAddDevice() {\n      return (\n        this.newDevice.nodeId &&\n        this.newDevice.nodeId.trim() &&\n        this.newDevice.displayName &&\n        this.newDevice.displayName.trim()\n      );\n    },\n  },\n\n  methods: {\n    // Owner methods\n    addOwner() {\n      this.attempted = true;\n      if (!this.newOwner.name.trim()) return;\n\n      this.send({\n        topic: \"add_owner\",\n        payload: {\n          name: this.newOwner.name.trim(),\n          email: this.newOwner.email.trim(),\n          phone: this.newOwner.phone.trim(),\n        },\n      });\n\n      this.newOwner = { name: \"\", email: \"\", phone: \"\" };\n      this.attempted = false;\n    },\n\n    editOwner(owner) {\n      this.editingOwner = { ...owner };\n      this.editOwnerDialog = true;\n    },\n\n    saveOwner() {\n      this.send({\n        topic: \"update_owner\",\n        payload: {\n          name: this.editingOwner.name,\n          email: this.editingOwner.email,\n          phone: this.editingOwner.phone,\n          devices: this.owners[this.editingOwner.name].devices || [],\n        },\n      });\n      this.editOwnerDialog = false;\n    },\n\n    deleteOwner(ownerName) {\n      const owner = this.owners[ownerName];\n      const deviceCount = owner.devices ? owner.devices.length : 0;\n\n      const message =\n        deviceCount > 0\n          ? `Owner \"${owner.name}\" has ${deviceCount} devices. Delete anyway?`\n          : `Delete owner \"${owner.name}\"?`;\n\n      if (confirm(message)) {\n        this.send({\n          topic: \"delete_owner\",\n          payload: { name: ownerName },\n        });\n      }\n    },\n\n    // Device methods\n    addDevice() {\n      this.attempted = true;\n      if (!this.canAddDevice) return;\n\n      this.errorMessage = \"\";\n      this.attempted = false;\n\n      const binaryPins = Array(8)\n        .fill(null)\n        .map((_, index) => ({\n          label: this.newDevice.binaryPins[index]\n            ? this.newDevice.binaryPins[index].label || \"\"\n            : \"\",\n          trigger: this.newDevice.binaryPins[index]\n            ? this.newDevice.binaryPins[index].trigger || \"High\"\n            : \"High\",\n          alertLevel: this.newDevice.binaryPins[index]\n            ? this.newDevice.binaryPins[index].alertLevel || \"None\"\n            : \"None\",\n        }));\n\n      const analogPins = Array(4)\n        .fill(null)\n        .map((_, index) => ({\n          value: this.newDevice.analogPins[index]\n            ? this.newDevice.analogPins[index].value || \"\"\n            : \"\",\n          lowThreshold: this.newDevice.analogPins[index]\n            ? this.newDevice.analogPins[index].lowThreshold || 0\n            : 0,\n          highThreshold: this.newDevice.analogPins[index]\n            ? this.newDevice.analogPins[index].highThreshold || 100\n            : 100,\n          alertLevel: this.newDevice.analogPins[index]\n            ? this.newDevice.analogPins[index].alertLevel || \"None\"\n            : \"None\",\n        }));\n\n      this.send({\n        topic: \"add_device\",\n        payload: {\n          nodeId: this.newDevice.nodeId.trim(),\n          displayName: this.newDevice.displayName.trim(),\n          ownerName: this.newDevice.ownerName,\n          binaryPins: binaryPins,\n          analogPins: analogPins,\n        },\n      });\n\n      this.newDevice = {\n        nodeId: \"\",\n        displayName: \"\",\n        ownerName: \"\",\n        binaryPins: Array(8).fill(\"\"),\n        analogPins: Array(4).fill(\"\"),\n      };\n    },\n\n    editDevice(device) {\n      console.log(\"Editing device:\", device);\n      if (!device) {\n        console.error(\"No device found to edit\");\n        return;\n      }\n\n      this.editingDevice = {\n        nodeId: device.nodeId,\n        displayName: device.displayName,\n        ownerName: device.ownerName,\n        binaryPins:\n          device.binaryPins && device.binaryPins.length > 0\n            ? device.binaryPins.map((pin) => ({\n                label: pin.label || \"\",\n                trigger: pin.trigger || \"High\",\n                alertLevel: pin.alertLevel || \"None\",\n              }))\n            : Array(8).fill({\n                label: \"\",\n                trigger: \"High\",\n                alertLevel: \"None\",\n              }),\n        analogPins:\n          device.analogPins && device.analogPins.length > 0\n            ? device.analogPins.map((pin) => ({\n                value: pin.value || \"\",\n                lowThreshold: pin.lowThreshold || 0,\n                highThreshold: pin.highThreshold || 100,\n                alertLevel: pin.alertLevel || \"None\",\n              }))\n            : Array(4).fill({\n                value: \"\",\n                lowThreshold: 0,\n                highThreshold: 100,\n                alertLevel: \"None\",\n              }),\n        lastSeen: device.lastSeen,\n      };\n\n      this.editDialog = true;\n      this.editTab = \"binary\";\n      this.viewDialog = false;\n    },\n\n    saveDevice() {\n      this.send({\n        topic: \"update_device\",\n        payload: {\n          nodeId: this.editingDevice.nodeId,\n          displayName: this.editingDevice.displayName,\n          ownerName: this.editingDevice.ownerName,\n          binaryPins: this.editingDevice.binaryPins,\n          analogPins: this.editingDevice.analogPins,\n          lastSeen: this.editingDevice.lastSeen,\n        },\n      });\n      this.editDialog = false;\n    },\n\n    deleteDevice(nodeId) {\n      console.log(\"Trying to delete device:\", nodeId);\n      if (confirm(`Delete device \"${nodeId}\"?`)) {\n        this.send({\n          topic: \"delete_device\",\n          payload: { nodeId: nodeId },\n        });\n      }\n    },\n\n    viewDevice(device) {\n      this.selectedDevice = device;\n      this.viewDialog = true;\n      this.viewTab = \"binary\";\n    },\n\n    showOwnerDevices(ownerName) {\n      this.selectedOwner = {\n        name: ownerName,\n        ...this.owners[ownerName],\n      };\n      this.ownerDevicesDialog = true;\n    },\n\n    formatDate(dateStr) {\n      return new Date(dateStr).toLocaleString();\n    },\n\n    clearError() {\n      this.errorMessage = \"\";\n      this.attempted = false;\n    },\n\n    getBinaryPinCount(item) {\n      if (!item.binaryPins) return 0;\n      return item.binaryPins.filter(\n        (pin) => pin && pin.label && pin.label.trim()\n      ).length;\n    },\n\n    getAnalogPinCount(item) {\n      if (!item.analogPins) return 0;\n      return item.analogPins.filter(\n        (pin) => pin && typeof pin.value === \"string\" && pin.value.trim()\n      ).length;\n    },\n\n  },\n\n  mounted() {\n    this.send({ topic: \"get_owners\" });\n    this.send({ topic: \"get_devices\" });\n  },\n\n  watch: {\n    msg: {\n      handler(newMsg) {\n        console.log(\n          \"*** watch received topic:\",\n          newMsg.topic,\n          \"payload:\",\n          JSON.stringify(newMsg.payload)\n        );\n\n        if (newMsg && newMsg.topic === \"owners_data\") {\n          this.owners = newMsg.payload || {};\n        } else if (newMsg && newMsg.topic === \"devices_data\") {\n          this.devices = newMsg.payload || {};\n        } else if (newMsg && newMsg.topic === \"device_error\") {\n          this.errorMessage = newMsg.payload.error;\n        } else if (newMsg && newMsg.topic === \"owner_error\") {\n          // Handle owner errors\n          alert(\"Owner Error: \" + newMsg.payload.error);\n        } else if (newMsg && newMsg.topic === \"device_added\") {\n          this.devices = {\n            ...this.devices,\n            [newMsg.payload.nodeId]: newMsg.payload,\n          };\n          this.errorMessage = \"\";\n          console.log(\"Device added:\", newMsg.payload.nodeId);\n        } else if (newMsg && newMsg.topic === \"device_updated\") {\n          this.devices = {\n            ...this.devices,\n            [newMsg.payload.nodeId]: newMsg.payload,\n          };\n          console.log(\"Device updated:\", newMsg.payload.nodeId);\n        } else if (newMsg && newMsg.topic === \"device_deleted\") {\n          const updatedDevices = { ...this.devices };\n          delete updatedDevices[newMsg.payload.nodeId];\n          this.devices = updatedDevices;\n          console.log(\"Device deleted:\", newMsg.payload.nodeId);\n        } else if (newMsg && newMsg.topic === \"owner_added\") {\n          this.owners = {\n            ...this.owners,\n            [newMsg.payload.name]: newMsg.payload,\n          };\n          console.log(\"Owner added:\", newMsg.payload.name);\n        } else if (newMsg && newMsg.topic === \"owner_updated\") {\n          this.owners = {\n            ...this.owners,\n            [newMsg.payload.name]: newMsg.payload,\n          };\n          console.log(\"Owner updated:\", newMsg.payload.name);\n        } else if (newMsg && newMsg.topic === \"owner_deleted\") {\n          const updatedOwners = { ...this.owners };\n          delete updatedOwners[newMsg.payload.name];\n          this.owners = updatedOwners;\n          console.log(\"Owner deleted:\", newMsg.payload.name);\n        }\n      },\n      deep: true,\n    },\n  },\n};\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1320,
        "y": 240,
        "wires": [
            [
                "03b8ce6774a2abb5",
                "7100665dc8d8ec55"
            ]
        ]
    },
    {
        "id": "1dd74ca63fa183e2",
        "type": "inject",
        "z": "62f31c6b53afb626",
        "name": "Inject Test Device",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "add_node",
        "payload": "{     \"topic\": \"add_node\",     \"payload\": {         \"nodeId\": \"557\",         \"name\": \"Node Name\",         \"ownerId\": \"ownerId\",         \"binaryPins\": [\"pin1\", \"pin2\"],         \"analogPins\": [\"pinA\", \"pinB\"]     } }",
        "payloadType": "json",
        "x": 1100,
        "y": 440,
        "wires": [
            [
                "7100665dc8d8ec55"
            ]
        ]
    },
    {
        "id": "526ecc0b4996d3ac",
        "type": "mqtt in",
        "z": "bfe4d76a50650ba0",
        "name": "Subscribe to lora/out",
        "topic": "lora/out/#",
        "qos": "2",
        "datatype": "json",
        "broker": "315ea8347fb746b3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 440,
        "y": 600,
        "wires": [
            [
                "873542552da0316f",
                "5ba5b8a6628e04d6"
            ]
        ]
    },
    {
        "id": "a55a6868925ad162",
        "type": "function",
        "z": "bfe4d76a50650ba0",
        "name": "Process JSON message",
        "func": "const topic = msg.topic; // Retrieve the topic from the incoming message\nconst payload = msg.payload; // Retrieve the payload containing the necessary data\n\n// Retrieve the devices from global context\nconst devices = global.get(\"devices\") || {};\nconst currentDeviceName = payload.nodeId.toString(); // Use nodeId for identification\nconst currentDevice = devices[currentDeviceName];\n\nnode.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg)); // Log the whole message\n\nif (!currentDevice) {\n    node.warn(\"Device not found for nodeId: \" + payload.nodeId);\n    return null; // Stop processing if the device is not found\n}\n\n// Initialize an array to collect alerts\nconst alerts = [];\n\n// Check binary pins using bitwise operations\nconst binaryPinStates = payload.digital; // Assuming msg.payload.digital contains the binary pin byte\nnode.log(\"Binary pin states received: \" + binaryPinStates.toString(2).padStart(currentDevice.binaryPins.length, '0')); // Log binary states in binary format\n\ncurrentDevice.binaryPins.forEach((pin, index) => {\n    // Check if pin label is defined; if not, skip this pin\n    if (!pin.label) {\n        node.log(`Skipping binary pin index: ${index} because pin label is undefined.`);\n        return; // Skip to the next iteration\n    }\n\n    // Get the state of the current binary pin using bitwise AND and shifting\n    const pinState = (binaryPinStates >> index) & 1; // Get the value of the current bit\n    node.log(`Checking binary pin index: ${index}, pin label: ${pin.label}, pin state: ${pinState}`); // Log the current pin evaluation\n\n    // Check for High trigger\n    if (pin.trigger === 'High' && pinState === 1) { // High trigger alert\n        alerts.push({\n            ownerName: currentDevice.ownerName,\n            nodeId: payload.nodeId, // ✅ Added nodeId\n            pinLabel: pin.label,\n            alertMessage: `Triggered HIGH`,\n            timestamp: payload.time_iso\n        });\n        node.log(`Alert added for binary pin: ${pin.label} HIGH`); // Log alert addition\n    }\n    // Check for Low trigger\n    else if (pin.trigger === 'Low' && pinState === 0) { // Low trigger alert\n        alerts.push({\n            ownerName: currentDevice.ownerName,\n            nodeId: payload.nodeId, // ✅ Added nodeId\n            pinLabel: pin.label,\n            alertMessage: `Triggered LOW`,\n            timestamp: payload.time_iso\n        });\n        node.log(`Alert added for binary pin: ${pin.label} LOW`); // Log alert addition\n    } else {\n        node.log(`No alert triggered for binary pin ${pin.label}. Expected: ${pin.trigger}, Actual state: ${pinState}`); // Log when no alert is triggered\n    }\n});\n\n// Check analog pins\ncurrentDevice.analogPins.forEach((pin, index) => {\n    // Check if pin label is defined; if not, skip this pin\n    if (!pin.label) {\n        node.log(`Skipping analog pin index: ${index} because pin label is undefined.`);\n        return; // Skip to the next iteration\n    }\n\n    // Assuming msg.payload.analog holds the pin values for the corresponding index\n    if (payload.analog && msg.payload.analog[index] !== undefined) {\n        const analogValue = msg.payload.analog[index];\n        node.log(`Checking analog pin index: ${index}, pin label: ${pin.label}, value: ${analogValue}`); // Log the current analog evaluation\n        if (analogValue < pin.lowThreshold) { // Low threshold alert\n            alerts.push({\n                ownerName: currentDevice.ownerName,\n                nodeId: payload.nodeId, // ✅ Added nodeId\n                pinLabel: pin.label,\n                alertMessage: `Analog value is LOW: ${analogValue}`,\n                timestamp: payload.time_iso\n            });\n            node.log(`Alert added for analog pin: ${pin.label} LOW threshold`); // Log alert for low threshold\n        } else if (analogValue > pin.highThreshold) { // High threshold alert\n            alerts.push({\n                ownerName: currentDevice.ownerName,\n                nodeId: payload.nodeId, // ✅ Added nodeId\n                pinLabel: pin.label,\n                alertMessage: `Analog value is HIGH: ${analogValue}`,\n                timestamp: payload.time_iso\n            });\n            node.log(`Alert added for analog pin: ${pin.label} HIGH threshold`); // Log alert for high threshold\n        } else {\n            node.log(`No alert for analog pin ${pin.label}. Value within range: ${analogValue}`); // Log if value is within range\n        }\n    } else {\n        node.log(`Analog pin index ${index} does not exist in payload. Skipping.`); // Log if analog data is missing\n    }\n});\n\n// Send the structured alerts to the topic \"add_alert\"\nif (alerts.length > 0) {\n    alerts.forEach(alert => {\n        node.send({\n            topic: \"add_alert\",\n            payload: alert\n        });\n    });\n    node.log(`Total alerts sent: ${alerts.length}`); // Log total number of alerts sent\n} else {\n    node.log(\"No alerts to send.\"); // Log when no alerts are present\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 900,
        "wires": [
            [
                "245051e60d123ed7",
                "f01a239f5dcac98e"
            ]
        ]
    },
    {
        "id": "245051e60d123ed7",
        "type": "debug",
        "z": "bfe4d76a50650ba0",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3e028f50bd6ceb32",
        "type": "ui-template",
        "z": "bfe4d76a50650ba0",
        "group": "5aa9d9b44198b615",
        "page": "",
        "ui": "",
        "name": "Alert Template",
        "order": 2,
        "width": "0",
        "height": "0",
        "head": "",
        "format": "<template>\n  <div style=\"width: 100%; padding: 0; margin: 0;\">\n    <style>\n      /* Set general font size for all elements within the container */\n      .v-container {\n        font-size: 0.75rem;\n        padding: 0;\n        /* Remove unnecessary padding */\n      }\n\n      .v-card {\n        width: 100%;\n        /* Make cards full width */\n        margin-bottom: 16px;\n        /* Add margin for vertical spacing */\n      }\n\n      .v-card-title {\n        font-size: 0.85rem;\n      }\n\n      .v-btn {\n        font-size: 0.7rem;\n        padding: 4px 8px;\n      }\n\n      .v-text-field input {\n        font-size: 0.75rem;\n        padding: 4px;\n      }\n\n      .v-data-table {\n        font-size: 0.75rem;\n        min-width: 100%;\n        /* Ensure the data table uses the full width */\n      }\n\n      /* Target Vuetify 3.x header cells */\n      .v-data-table th,\n      .v-data-table__th,\n      .v-data-table-header th,\n      .v-data-table-header__content {\n        white-space: nowrap !important;\n        font-weight: 800 !important;\n        /* Bold headers */\n        background-color: #424242 !important;\n        /* Dark gray background */\n        color: #ffffff !important;\n        /* White text for contrast */\n        padding: 8px !important;\n        /* Ensure padding */\n        height: 36px !important;\n        /* Ensure header height */\n      }\n\n      .v-data-table td {\n        white-space: nowrap;\n      }\n\n      .nr-dashboard-cardpanel,\n      .nr-dashboard-template {\n        width: 100% !important;\n      }\n    </style>\n\n    <v-container fluid class=\"pa-6\" style=\"max-width: 1200px;\">\n      <!-- Adjust max-width -->\n      <h2 class=\"text-h4 d-flex align-center mb-4\">\n        <v-icon class=\"mr-2\">mdi-alarm</v-icon>\n        Alerts Dashboard\n      </h2>\n\n      <v-card>\n        <v-card-title>\n          <v-icon class=\"mr-2\">mdi-magnify</v-icon>\n          Filter Alerts\n        </v-card-title>\n        <v-card-text>\n          <v-text-field v-model=\"alertSearchQuery\" label=\"Search alerts...\" prepend-inner-icon=\"mdi-magnify\"\n            density=\"compact\" clearable></v-text-field>\n        </v-card-text>\n      </v-card>\n\n      <v-card>\n        <v-card-title>Select Owner to Clear Alerts</v-card-title>\n        <v-card-text>\n          <v-select v-model=\"selectedOwner\" :items=\"ownerOptions\" item-text=\"title\" item-value=\"value\"\n            label=\"Choose Owner\" clearable></v-select>\n          <v-btn @click=\"clearAllAlerts\" color=\"red\" class=\"mt-4\">Clear All Alerts</v-btn>\n        </v-card-text>\n      </v-card>\n\n      <v-card>\n        <v-card-title>\n          Current Alerts ({{ filteredAlertsList.length }} of {{ alerts.length }})\n        </v-card-title>\n        <v-data-table :headers=\"alertHeaders\" :items=\"Array.isArray(filteredAlertsList) ? filteredAlertsList : []\"\n          class=\"elevation-0\" density=\"compact\" style=\"overflow-x: auto;\">\n          <template v-slot:item.ownerName=\"{ item }\">\n            <v-chip size=\"small\">{{ item.ownerName }}</v-chip>\n          </template>\n          <template v-slot:item.deviceName=\"{ item }\">\n            <v-chip size=\"small\">{{ getDeviceDisplayName(item.deviceName) }}</v-chip>\n          </template>\n          <template v-slot:item.pinLabel=\"{ item }\">\n            <v-chip size=\"small\">{{ item.pinLabel }}</v-chip>\n          </template>\n          <template v-slot:item.alertMessage=\"{ item }\">\n            <span>{{ item.alertMessage }}</span>\n          </template>\n          <template v-slot:item.timestamp=\"{ item }\">\n            <span>{{ formatDate(item.timestamp) }}</span>\n          </template>\n          <template v-slot:item.actions=\"{ item }\">\n            <v-btn icon=\"mdi-pencil\" size=\"small\" @click=\"editAlert(item)\"></v-btn>\n            <v-btn icon=\"mdi-delete\" size=\"small\" color=\"error\" @click=\"clear(item)\">Clear</v-btn>\n          </template>\n        </v-data-table>\n      </v-card>\n    </v-container>\n\n    <!-- Additional dialogs can be included below -->\n    <v-dialog v-model=\"editAlertDialog\" max-width=\"400px\">\n      <v-card>\n        <v-card-title>Edit Alert</v-card-title>\n        <v-card-text>\n          <v-text-field v-model=\"editingAlert.alertMessage\" label=\"Alert Message\"></v-text-field>\n          <v-autocomplete v-model=\"editingAlert.ownerName\" :items=\"ownerOptions\" label=\"Owner\" variant=\"outlined\"\n            clearable density=\"compact\"></v-autocomplete>\n          <v-autocomplete v-model=\"editingAlert.deviceName\" :items=\"deviceOptions\" label=\"Device\" variant=\"outlined\"\n            clearable density=\"compact\"></v-autocomplete>\n        </v-card-text>\n        <v-card-actions>\n          <v-spacer></v-spacer>\n          <v-btn @click=\"editAlertDialog = false\">Cancel</v-btn>\n          <v-btn @click=\"saveAlert(editingAlert)\" color=\"primary\">Save</v-btn>\n        </v-card-actions>\n      </v-card>\n    </v-dialog>\n  </div>\n</template>\n\n<script>\n  export default {\n  data() {\n    return {\n      alertSearchQuery: '',\n      alerts: [],\n      devices: {},\n      editingAlert: {},\n      editAlertDialog: false,\n      selectedOwner: null, // Track the selected owner for clearing alerts\n      ownerOptions: [],\n      deviceOptions: []\n    };\n  },\n  computed: {\n    filteredAlertsList() {\n      if (!Array.isArray(this.alerts)) return []; // Ensure alerts is an array\n      const filtered = this.alertSearchQuery\n        ? this.alerts.filter(alert =>\n            alert.alertMessage.toLowerCase().includes(this.alertSearchQuery.toLowerCase()) ||\n            alert.ownerName.toLowerCase().includes(this.alertSearchQuery.toLowerCase()) ||\n            alert.deviceName.toLowerCase().includes(this.alertSearchQuery.toLowerCase()) ||\n            (alert.pinLabel && alert.pinLabel.toLowerCase().includes(this.alertSearchQuery.toLowerCase()))\n          )\n        : this.alerts;\n\n      // Sort the filtered alerts by timestamp in descending order\n      return filtered.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)); // Most recent first\n    },\n    alertHeaders() {\n      return [\n        { title: 'Owner', key: 'ownerName'}, // Set width for each column\n        { title: 'Device', key: 'deviceName'},\n        { title: 'Pin Name', key: 'pinLabel'},\n        { title: 'Alert Message', key: 'alertMessage'},\n        { title: 'Timestamp', key: 'timestamp'},\n        { title: 'Actions', key: 'actions'}\n      ];\n    }\n  },\n  methods: {\n\n    getDeviceDisplayName(nodeId) {\n      const device = Object.values(this.devices).find(d => d.nodeId === nodeId);\n      return device ? device.displayName : nodeId;\n    },\n\n    formatDate(dateStr) {\n      const date = new Date(dateStr);\n      return !isNaN(date.getTime()) ? date.toLocaleString() : 'Invalid Date';\n    },\n    editAlert(alert) {\n      this.editingAlert = { ...alert };\n      this.editAlertDialog = true;\n    },\n    clear(alert) {\n      if (confirm(`Clear alert \"${alert.alertMessage}\"?`)) {\n        this.send({\n          topic: \"clear_alert\",\n          payload: { alertId: alert.alertId }\n        });\n      }\n    },\n    clearAllAlerts() {\n      // Confirm before clearing all alerts for the selected owner\n      if (!this.selectedOwner) {\n        alert(\"Please select an owner to clear alerts.\");\n        return;\n      }\n\n      // Log selected owner before sending\n      console.log(\"Clearing alerts for owner:\", this.selectedOwner);\n\n      // Send request to the backend to clear all alerts for the selected owner\n      if (confirm(`Are you sure you want to clear all alerts for ${this.selectedOwner}?`)) {\n        this.send({\n          topic: \"clear_all_alerts\",\n          payload: { ownerName: this.selectedOwner } // Ensure ownerName is included\n        });\n      }\n    },\n    saveAlert(updatedAlert) {\n      this.send({\n        topic: \"update_alert\",\n        payload: updatedAlert\n      });\n      this.editAlertDialog = false;\n    }\n  },\n  mounted() {\n    this.send({ topic: \"get_alerts\" });\n    // Fetch owners to populate the ownerOptions\n    this.send({ topic: \"get_owners\" });\n    this.send({ topic: \"get_devices\" });\n  },\n  watch: {\n    selectedOwner(newVal) {\n      console.log(\"Selected Owner:\", newVal); // Log the entire selected object to see its structure\n    },\n    msg: {\n      handler(newMsg) {\n        if (newMsg && newMsg.topic === \"alerts_data\") {\n          console.log(\"Received alerts data:\", newMsg.payload);\n          this.alerts = Array.isArray(newMsg.payload)\n            ? newMsg.payload.map(alert => ({\n                ...alert,\n                pinLabel: alert.pinLabel || \"\" // Ensure pinLabel is included and defaults to empty\n              }))\n            : [];\n        } else if (newMsg.topic === \"devices_data\") {\n          // Add this handler\n          this.devices = newMsg.payload || {};\n          console.log(\"Received devices data:\", this.devices);\n        } else if (newMsg.topic === \"alert_updated\") {\n          const updatedAlert = newMsg.payload;\n          const index = this.alerts.findIndex(alert => alert.alertId === updatedAlert.alertId);\n          if (index !== -1) {\n            this.$set(this.alerts, index, { ...updatedAlert, pinLabel: updatedAlert.pinLabel || \"\" });\n          }\n        } else if (newMsg.topic === \"alert_error\") {\n          alert(newMsg.payload.error);\n        } else if (newMsg.topic === \"owners_data\") {\n          this.ownerOptions = newMsg.payload.map(owner => ({\n            title: owner.name,\n            value: owner.name\n          }));\n          console.log(\"Owner Options:\", this.ownerOptions); // Log the owners\n        } else if (newMsg.topic === \"clear_alerts_response\") {\n          // Handle response after clearing alerts if you send one\n          const clearedAlerts = newMsg.payload; // Assuming you return the remaining alerts here\n          this.alerts = clearedAlerts; // Update the alerts\n        }\n      },\n      deep: true\n    }\n  }\n};\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 1200,
        "wires": [
            [
                "f01a239f5dcac98e"
            ]
        ]
    },
    {
        "id": "8cf7b8cedf39cb2c",
        "type": "inject",
        "z": "bfe4d76a50650ba0",
        "name": "Inject Test Alert",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "add_alert",
        "payload": "{     \"ownerName\": \"Bob\",     \"deviceName\": \"Sensor C\",     \"alertMessage\": \"Motion detected\",     \"pinLabel\": \"Living Room\",    \"timestamp\": \"2025-06-09T12:05:00Z\" }",
        "payloadType": "json",
        "x": 520,
        "y": 1260,
        "wires": [
            [
                "f01a239f5dcac98e"
            ]
        ]
    },
    {
        "id": "f01a239f5dcac98e",
        "type": "function",
        "z": "bfe4d76a50650ba0",
        "name": "Alert Admin",
        "func": "// Retrieve the topic from the incoming message\nconst topic = msg.topic;\nconst payload = msg.payload;\n\n// Declare devices once at the top so all cases can use it\nconst devices = global.get(\"devices\") || {};\n\nconst noLogTopics = [\n    \"alerts_data\",\n    \"alert_error\",\n    \"devices_data\"\n];\n\n// Log incoming messages unless they're in the no-log list\nif (!noLogTopics.includes(topic)) {\n    node.log(\"Received message for topic: \" + topic + \" json: \" + JSON.stringify(msg));\n}\n\nswitch (topic) {\n    case \"get_alerts\":\n        const alerts = global.get(\"alerts\") || {};\n        msg.payload = Object.values(alerts); // This ensures the payload is an array\n        msg.topic = \"alerts_data\"; // Change the topic for the response\n        node.log(\"Fetched alerts: \" + JSON.stringify(msg.payload)); // Log fetched alerts\n        return msg; // Return the message\n\n    case \"get_devices\":\n        // Use the devices variable declared at the top\n        msg.payload = devices; // Return devices object for lookup\n        msg.topic = \"devices_data\";\n        return msg;\n\ncase \"add_alert\":\n    const allAlerts = global.get(\"alerts\") || {};\n\n    // DEBUG: Show exactly what we received\n    node.log(\"=== DEBUG ADD_ALERT ===\");\n    node.log(\"Full msg: \" + JSON.stringify(msg, null, 2));\n    node.log(\"payload exists: \" + (payload ? \"YES\" : \"NO\"));\n    if (payload) {\n        node.log(\"alertMessage: '\" + (payload.alertMessage || 'MISSING') + \"'\");\n        node.log(\"ownerName: '\" + (payload.ownerName || 'MISSING') + \"'\");\n        node.log(\"pinLabel: '\" + (payload.pinLabel || 'MISSING') + \"'\");\n        node.log(\"nodeId: '\" + (payload.nodeId || 'MISSING') + \"'\");\n        node.log(\"deviceName: '\" + (payload.deviceName || 'MISSING') + \"'\");\n    }\n    node.log(\"========================\");\n\n    // Check each field individually to see which one fails\n    if (!payload) {\n        node.log(\"ERROR: No payload\");\n        return { topic: \"alert_error\", payload: { error: \"No payload provided\" } };\n    }\n    if (!payload.alertMessage) {\n        node.log(\"ERROR: Missing alertMessage\");\n        return { topic: \"alert_error\", payload: { error: \"Missing alertMessage\" } };\n    }\n    if (!payload.ownerName) {\n        node.log(\"ERROR: Missing ownerName\");\n        return { topic: \"alert_error\", payload: { error: \"Missing ownerName\" } };\n    }\n    if (!payload.pinLabel) {\n        node.log(\"ERROR: Missing pinLabel\");\n        return { topic: \"alert_error\", payload: { error: \"Missing pinLabel\" } };\n    }\n    if (!payload.nodeId) {\n        node.log(\"ERROR: Missing nodeId\");\n        return { topic: \"alert_error\", payload: { error: \"Missing nodeId\" } };\n    }\n\n    // If we get here, all required fields are present\n    node.log(\"All required fields present - proceeding with alert creation\");\n\n    // Look up device information from nodeId\n    const device = devices[payload.nodeId];\n    const deviceName = device ? (device.displayName || payload.nodeId) : payload.nodeId;\n\n    // Create composite key using nodeId to prevent duplicates from same device/pin\n    const compositeKey = `${payload.nodeId}_${payload.pinLabel}`;\n\n    // Check if alert already exists for this device/pin combo\n    if (allAlerts[compositeKey]) {\n        // Update existing alert instead of creating duplicate\n        allAlerts[compositeKey] = {\n            ...allAlerts[compositeKey],\n            alertMessage: payload.alertMessage,\n            timestamp: new Date().toISOString(),\n            count: (allAlerts[compositeKey].count || 1) + 1\n        };\n        node.log(\"Updated existing alert: \" + compositeKey + \" (count: \" + allAlerts[compositeKey].count + \")\");\n    } else {\n        // Create new alert\n        allAlerts[compositeKey] = {\n            alertId: compositeKey,\n            alertMessage: payload.alertMessage,\n            ownerName: payload.ownerName,\n            deviceName: deviceName,\n            nodeId: payload.nodeId,\n            pinLabel: payload.pinLabel,\n            timestamp: new Date().toISOString(),\n            count: 1\n        };\n        node.log(\"Created new alert: \" + compositeKey);\n    }\n\n    global.set(\"alerts\", allAlerts);\n    msg.payload = Object.values(allAlerts);\n    msg.topic = \"alerts_data\";\n    return msg;\n\n    case \"clear_alert\":\n        const alertsToClear = global.get(\"alerts\") || {};\n        if (!payload.alertId) {\n            node.log(\"Alert ID is missing. Cannot clear alert.\");\n            return { topic: \"alert_error\", payload: { error: \"Alert ID is required.\" } };\n        }\n\n        if (alertsToClear[payload.alertId]) {\n            delete alertsToClear[payload.alertId];\n            global.set(\"alerts\", alertsToClear);\n            node.log(\"Cleared alert: \" + payload.alertId);\n            msg.payload = Object.values(alertsToClear);\n            msg.topic = \"alerts_data\";\n        } else {\n            node.log(\"Alert ID not found: \" + payload.alertId);\n            return { topic: \"alert_error\", payload: { error: \"Alert ID not found.\" } };\n        }\n        return msg;\n\n    case \"update_alert\":\n        const alertsToUpdate = global.get(\"alerts\") || {};\n        node.log(\"Incoming payload for update: \" + JSON.stringify(payload));\n        if (alertsToUpdate[payload.alertId]) {\n            alertsToUpdate[payload.alertId] = {\n                ...alertsToUpdate[payload.alertId],\n                ...payload,\n                updated: new Date().toISOString()\n            };\n            global.set(\"alerts\", alertsToUpdate);\n            node.log(\"Updated alert: \" + JSON.stringify(alertsToUpdate[payload.alertId]));\n            msg.payload = Object.values(alertsToUpdate);\n            msg.topic = \"alerts_data\";\n        } else {\n            node.log(\"Alert ID not found: \" + payload.alertId);\n            return { topic: \"alert_error\", payload: { error: \"Alert ID not found.\" } };\n        }\n        return msg;\n\n    case \"delete_alert\":\n        const alertsToDelete = global.get(\"alerts\") || {};\n        if (!payload.alertId) {\n            node.log(\"Alert ID is missing. Cannot delete alert.\");\n            return { topic: \"alert_error\", payload: { error: \"Alert ID is required.\" } };\n        }\n\n        if (alertsToDelete[payload.alertId]) {\n            delete alertsToDelete[payload.alertId];\n            global.set(\"alerts\", alertsToDelete);\n            node.log(\"Deleted alert: \" + payload.alertId);\n            msg.payload = Object.values(alertsToDelete);\n            msg.topic = \"alerts_data\";\n        } else {\n            node.log(\"Alert ID not found.\");\n            return { topic: \"alert_error\", payload: { error: \"Alert ID not found.\" } };\n        }\n        return msg;\n\n    case \"clear_all_alerts\":\n        const ownerNameToClear = payload.ownerName;\n        const alertsToClearAll = global.get(\"alerts\") || {};\n\n        // Log the current state of alerts before clearing\n        node.log(\"Current alerts before clearing for owner \" + ownerNameToClear + \": \" + JSON.stringify(alertsToClearAll));\n\n        // Create an object to store alerts that will remain after clearing\n        const remainingAlerts = {};\n\n        // Iterate through all alerts and remove alerts for the specified owner\n        for (const alertId in alertsToClearAll) {\n            if (alertsToClearAll[alertId].ownerName !== ownerNameToClear) {\n                remainingAlerts[alertId] = alertsToClearAll[alertId]; // Preserve this alert\n            } else {\n                node.log(`Clearing alert: ${alertId} for owner: ${ownerNameToClear}`);\n            }\n        }\n\n        // Log the alerts that will be cleared and those that will remain\n        node.log(\"Alerts to be cleared: \" + JSON.stringify(Object.keys(alertsToClearAll).filter(alertId => alertsToClearAll[alertId].ownerName === ownerNameToClear)));\n        node.log(\"Remaining alerts after clearing: \" + JSON.stringify(remainingAlerts));\n\n        // Update global alerts to only include remaining alerts\n        global.set(\"alerts\", remainingAlerts);\n\n        // Return the updated alerts list back to the frontend\n        msg.payload = Object.values(remainingAlerts); // Convert remaining alerts to an array\n        msg.topic = \"alerts_data\"; // Change topic for the response\n        return msg;\n\n    case \"get_owners\":\n        const owners = global.get(\"owners\") || {};\n        const ownerList = Object.values(owners); // Convert the owners object to an array\n        msg.payload = ownerList.map(owner => ({\n            name: owner.name, // Map the owner structure to return meaningful data\n        }));\n        msg.topic = \"owners_data\"; // Set the topic for the response\n        return msg; // Return the message\n\n    default:\n        node.warn(\"Unrecognized topic: \" + topic);\n        return null;\n}\n\n// Return the message to the caller (redundant since every case returns earlier)\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1400,
        "wires": [
            [
                "3e028f50bd6ceb32"
            ]
        ]
    },
    {
        "id": "fadbee19fd967823",
        "type": "inject",
        "z": "bfe4d76a50650ba0",
        "name": "Inject Test JSON Packet",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"type\":\"sensor\",\"nodeId\":2697689064,\"counter\":10971,\"battery\":0,\"voltage\":12,\"uptime\":333493,\"analog\":[0,785,873,60],\"digital\":3,\"timestamp_ms\":235403458,\"timestamp\":1749453362,\"time\":\"2025-06-09 17:16:02\",\"time_iso\":\"2025-06-09T17:16:02+1000\",\"GW\":\"WiFi LoRa 32 V3.2\",\"GW_ip\":\"192.168.20.101\",\"GW_mac\":\"30:ED:A0:CB:0E:8C\"}",
        "payloadType": "json",
        "x": 510,
        "y": 820,
        "wires": [
            [
                "a55a6868925ad162",
                "cfc86772267cc31d"
            ]
        ]
    },
    {
        "id": "873542552da0316f",
        "type": "debug",
        "z": "bfe4d76a50650ba0",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 620,
        "wires": []
    },
    {
        "id": "cfc86772267cc31d",
        "type": "debug",
        "z": "bfe4d76a50650ba0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 760,
        "wires": []
    },
    {
        "id": "256c9d375e23ce1a",
        "type": "ui-switch",
        "z": "bfe4d76a50650ba0",
        "name": "MQTT OFF/ON",
        "label": "MQTT OFF/ON",
        "group": "5aa9d9b44198b615",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": false,
        "topic": "mqtt",
        "topicType": "str",
        "style": "",
        "className": "",
        "layout": "row-left",
        "clickableArea": "switch",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "x": 280,
        "y": 700,
        "wires": [
            [
                "989a0bbb3612d11c"
            ]
        ]
    },
    {
        "id": "5ba5b8a6628e04d6",
        "type": "switch",
        "z": "bfe4d76a50650ba0",
        "name": "mqtt flow control",
        "property": "enable",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 630,
        "y": 720,
        "wires": [
            [
                "a55a6868925ad162"
            ],
            []
        ]
    },
    {
        "id": "989a0bbb3612d11c",
        "type": "change",
        "z": "bfe4d76a50650ba0",
        "name": "Flow Enabler",
        "rules": [
            {
                "t": "set",
                "p": "enable",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "mqtt_in",
        "type": "mqtt in",
        "z": "bfe4d76a50650ba0",
        "name": "Subscribe to lora/in/#",
        "topic": "lora/in/#",
        "qos": "1",
        "datatype": "buffer",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 300,
        "y": 320,
        "wires": [
            [
                "parse_function"
            ]
        ]
    },
    {
        "id": "parse_function",
        "type": "function",
        "z": "bfe4d76a50650ba0",
        "name": "Parse Binary to JSON",
        "func": "// Get binary buffer\nconst buffer = msg.payload;\nconst topic = msg.topic;\n\n// Check for null or invalid buffer\nif (!buffer) {\n    msg.payload = { error: \"Invalid parameters\" };\n    msg.topic = 'lora/out/error';\n    return msg;\n}\n\n// Check messageType (first byte)\nconst messageType = buffer.readUInt8(0);\nlet packet = {};\n\ntry {\n    if (messageType === 0x01 && buffer.length === 27) {\n        const nodeId = buffer.readUInt32LE(1);  // Offset 1-4\n        \n        // Validate nodeId\n        if (nodeId === 0) {\n            msg.payload = { error: \"Invalid packet data - nodeId is 0\" };\n            msg.topic = 'lora/out/error';\n            return msg;\n        }\n\n        packet = {\n            type: \"sensor\",\n            nodeId: nodeId,\n            counter: buffer.readUInt32LE(5),     // Offset 5-8\n            uptime: buffer.readUInt32LE(9),      // Offset 9-12\n            battery: buffer.readUInt8(13),       // Offset 13\n            voltage: buffer.readUInt16LE(14),    // Offset 14-15\n            analog: [\n                buffer.readUInt16LE(16),         // Offset 16-17\n                buffer.readUInt16LE(18),         // Offset 18-19\n                buffer.readUInt16LE(20),         // Offset 20-21\n                buffer.readUInt16LE(22)          // Offset 22-23\n            ],\n            digital: buffer.readUInt8(24)        // Offset 24\n        };\n        msg.topic = 'lora/out/sensor';\n        \n    } else if (messageType === 0x02 && buffer.length === 35) {\n        const nodeId = buffer.readUInt32LE(1);\n        const latitude = buffer.readFloatLE(16);\n        const longitude = buffer.readFloatLE(20);\n\n        if (nodeId === 0 ||\n            latitude < -90.0 || latitude > 90.0 ||\n            longitude < -180.0 || longitude > 180.0) {\n            msg.payload = { error: \"Invalid packet data\" };\n            msg.topic = 'lora/out/error';\n            return msg;\n        }\n\n        packet = {\n            type: \"gnss\",\n            nodeId: nodeId,\n            counter: buffer.readUInt32LE(5),\n            uptime: buffer.readUInt32LE(9),\n            battery: buffer.readUInt8(13),\n            voltage: buffer.readUInt16LE(14),\n            latitude: latitude,\n            longitude: longitude,\n            speed: buffer.readFloatLE(24),\n            hdop: buffer.readUInt8(28) / 10.0,\n            course: buffer.readFloatLE(29)\n        };\n        msg.topic = 'lora/out/gnss';\n        \n    } else {\n        // Unknown packet type or wrong length\n        msg.payload = { \n            error: `Unknown packet: type=0x${messageType.toString(16).padStart(2, '0').toUpperCase()}, length=${buffer.length}`\n        };\n        msg.topic = 'lora/out/error';\n        return msg;\n    }\n} catch (e) {\n    msg.payload = { error: `Parsing error: ${e.message}` };\n    msg.topic = 'lora/out/error';\n    return msg;\n}\n\nmsg.payload = packet;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 440,
        "wires": [
            [
                "debug_output",
                "json_mqtt"
            ]
        ]
    },
    {
        "id": "debug_output",
        "type": "debug",
        "z": "bfe4d76a50650ba0",
        "name": "Debug JSON",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 320,
        "wires": []
    },
    {
        "id": "json_mqtt",
        "type": "mqtt out",
        "z": "bfe4d76a50650ba0",
        "name": "Publish JSON",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 860,
        "y": 520,
        "wires": []
    },
    {
        "id": "10e107042b67a65d",
        "type": "ui-template",
        "z": "e8a3445017fb5db9",
        "group": "2aac87beefa6189a",
        "page": "",
        "ui": "",
        "name": "System Tasks",
        "order": 1,
        "width": 0,
        "height": 0,
        "head": "",
        "format": "<template>\n  <div style=\"width: 100%; padding: 0;\">\n    <style>\n      .v-container {\n        font-size: 0.85rem;\n        max-width: 100%;\n      }\n\n      .v-card-title {\n        font-size: 1rem;\n      }\n\n      .v-btn {\n        font-size: 0.8rem;\n      }\n    </style>\n\n    <v-container fluid class=\"pa-6\">\n      <v-card class=\"mb-6\">\n        <v-card-title>\n          <h2>Clear Global Data</h2>\n        </v-card-title>\n        <v-card-text>\n          <v-btn color=\"error\" @click=\"openConfirmationDialog\">Clear All Global Data</v-btn>\n\n          <!-- Confirmation Dialog -->\n          <v-dialog v-model=\"clearConfirmDialog\" max-width=\"500px\">\n            <v-card>\n              <v-card-title class=\"text-h5\">Confirm Action</v-card-title>\n              <v-card-text>\n                Are you sure you want to clear all global data? This action cannot be undone.\n              </v-card-text>\n              <v-card-actions>\n                <v-spacer></v-spacer>\n                <v-btn @click=\"clearConfirmDialog = false\">Cancel</v-btn>\n                <v-btn color=\"red\" @click=\"confirmClearGlobalData\">Clear Data</v-btn>\n              </v-card-actions>\n            </v-card>\n          </v-dialog>\n        </v-card-text>\n      </v-card>\n    </v-container>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      clearConfirmDialog: false, // Controls visibility of the confirmation dialog\n    };\n  },\n  methods: {\n    // Opens the confirmation dialog\n    openConfirmationDialog() {\n      this.clearConfirmDialog = true;\n    },\n\n    // Confirms the action to clear all global data\n    confirmClearGlobalData() {\n      // Send a message to Node-RED to clear all global data\n      this.send({\n        topic: \"clear_global_data\",\n        payload: {}, // Add any necessary payload if needed\n      });\n\n      // Close the dialog after action\n      this.clearConfirmDialog = false;\n\n      // Optionally notify user of action initiation\n      this.$notify({\n        title: \"Info\",\n        text: \"Clearing global data...\",\n        type: \"info\",\n      });\n    },\n    \n    // Handle response from Node-RED after clearing data\n    handleDatabaseClearFeedback(msg) {\n      if (msg.topic === \"global_data_cleared\" && msg.payload.success) {\n        this.$notify({\n          title: \"Success\",\n          text: \"Global data cleared successfully!\",\n          type: \"success\",\n        });\n      } else if (msg.topic === \"database_clear_error\") {\n        this.$notify({\n          title: \"Error\",\n          text: msg.payload.error || \"Failed to clear global data.\",\n          type: \"error\",\n        });\n      }\n    },\n\n  },\n};\n</script>",
        "storeOutMessages": true,
        "passthru": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 440,
        "y": 160,
        "wires": [
            [
                "a5b4d9fb1e9a6feb"
            ]
        ]
    },
    {
        "id": "a5b4d9fb1e9a6feb",
        "type": "function",
        "z": "e8a3445017fb5db9",
        "name": "System Functions",
        "func": "// Check that the incoming message is for clearing global data\nif (msg.topic === \"clear_global_data\") {\n    // Clear specified global variables\n    global.set(\"owners\", {});  // Reset owners to an empty array\n    global.set(\"devices\", {}); // Reset devices to an empty array\n    global.set(\"alerts\", {});  // Reset alerts to an empty array\n\n    // Log the action in Node-RED's debug console\n    node.log(\"Global variables cleared: owners, devices, alerts.\");\n\n    // Return a message to indicate that action has been performed\n    return { topic: \"global_data_cleared\", payload: { success: true } };\n} else {\n    // Pass through other messages\n    return msg; // Forward other messages as they are\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 420,
        "wires": [
            [
                "10e107042b67a65d"
            ]
        ]
    },
    {
        "id": "sensor_inject",
        "type": "inject",
        "z": "b320d858532c1eb7",
        "name": "Inject Test Sensor Packet",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 260,
        "wires": [
            [
                "sensor_function"
            ]
        ]
    },
    {
        "id": "sensor_function",
        "type": "function",
        "z": "b320d858532c1eb7",
        "name": "Generate Binary Test Sensor Packet",
        "func": "// Get or initialize message counter\nlet counter = flow.get('sensor_counter') || 1000;\n\n// Test sensor packet data\nconst packet = {\n    messageType: 0x01,\n    nodeId: 2697689064,\n    messageCounter: counter,\n    uptime: 3600,\n    batteryLevel: 85,\n    batteryVoltage: 3700,\n    pins: {\n        analog: [1024, 2048, 512, 3072],\n        boolean: 0b10110011\n    },\n    reserved: [0x00, 0x00]\n};\n\n// Create binary buffer (27 bytes)\nconst buffer = Buffer.alloc(27);\nlet offset = 0;\n\n// Write fields (little-endian)\nbuffer.writeUInt8(packet.messageType, offset); offset += 1;\nbuffer.writeUInt32LE(packet.nodeId, offset); offset += 4;\nbuffer.writeUInt32LE(packet.messageCounter, offset); offset += 4;\nbuffer.writeUInt32LE(packet.uptime, offset); offset += 4;\nbuffer.writeUInt8(packet.batteryLevel, offset); offset += 1;\nbuffer.writeUInt16LE(packet.batteryVoltage, offset); offset += 2;\nfor (let i = 0; i < 4; i++) {\n    buffer.writeUInt16LE(packet.pins.analog[i], offset); offset += 2;\n}\nbuffer.writeUInt8(packet.pins.boolean, offset); offset += 1;\nbuffer.writeUInt8(packet.reserved[0], offset); offset += 1;\nbuffer.writeUInt8(packet.reserved[1], offset);\n\n// Increment and save counter\ncounter++;\nflow.set('sensor_counter', counter);\n\n// Set MQTT payload and topic\nmsg.payload = buffer;\nmsg.topic = 'lora/in/sensor';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 320,
        "wires": [
            [
                "sensor_mqtt",
                "77ef2d41ae630a1b"
            ]
        ]
    },
    {
        "id": "sensor_mqtt",
        "type": "mqtt out",
        "z": "b320d858532c1eb7",
        "name": "Publish Binary Test Sensor Packet",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "315ea8347fb746b3",
        "x": 880,
        "y": 400,
        "wires": []
    },
    {
        "id": "gnss_inject",
        "type": "inject",
        "z": "b320d858532c1eb7",
        "name": "Inject Test GNSS Packet",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "15",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 380,
        "wires": [
            [
                "gnss_function"
            ]
        ]
    },
    {
        "id": "gnss_function",
        "type": "function",
        "z": "b320d858532c1eb7",
        "name": "Generate Binary Test GNSS Packet",
        "func": "// Get or initialize message counter\nlet counter = flow.get('gnss_counter') || 1000;\n\n// Fake GNSS packet data\nconst packet = {\n    messageType: 0x02,\n    nodeId: 2697689064,\n    messageCounter: counter,\n    uptime: 3600,\n    batteryLevel: 85,\n    batteryVoltage: 3700,\n    latitude: 37.7749,\n    longitude: -122.4194,\n    speed: 10.5,\n    hdop: 12,\n    course: 180.0,\n    reserved: [0x00, 0x00]\n};\n\n// Create binary buffer (35 bytes)\nconst buffer = Buffer.alloc(35);\nlet offset = 0;\n\n// Write fields (little-endian)\nbuffer.writeUInt8(packet.messageType, offset); offset += 1;\nbuffer.writeUInt32LE(packet.nodeId, offset); offset += 4;\nbuffer.writeUInt32LE(packet.messageCounter, offset); offset += 4;\nbuffer.writeUInt32LE(packet.uptime, offset); offset += 4;\nbuffer.writeUInt8(packet.batteryLevel, offset); offset += 1;\nbuffer.writeUInt16LE(packet.batteryVoltage, offset); offset += 2;\nbuffer.writeFloatLE(packet.latitude, offset); offset += 4;\nbuffer.writeFloatLE(packet.longitude, offset); offset += 4;\nbuffer.writeFloatLE(packet.speed, offset); offset += 4;\nbuffer.writeUInt8(packet.hdop, offset); offset += 1;\nbuffer.writeFloatLE(packet.course, offset); offset += 4;\nbuffer.writeUInt8(packet.reserved[0], offset); offset += 1;\nbuffer.writeUInt8(packet.reserved[1], offset);\n\n// Increment and save counter\ncounter++;\nflow.set('gnss_counter', counter);\n\n// Set MQTT payload and topic\nmsg.payload = buffer;\nmsg.topic = 'lora/in/gnss';\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 460,
        "wires": [
            [
                "gnss_mqtt"
            ]
        ]
    },
    {
        "id": "gnss_mqtt",
        "type": "mqtt out",
        "z": "b320d858532c1eb7",
        "name": "Publish Binary Test GNSS Packet",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "315ea8347fb746b3",
        "x": 880,
        "y": 560,
        "wires": []
    },
    {
        "id": "77ef2d41ae630a1b",
        "type": "debug",
        "z": "b320d858532c1eb7",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 300,
        "wires": []
    },
    {
        "id": "74592d25870dc84b",
        "type": "mqtt out",
        "z": "b320d858532c1eb7",
        "name": "MQTT pub",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "315ea8347fb746b3",
        "x": 670,
        "y": 720,
        "wires": []
    },
    {
        "id": "122a10cd50f2b674",
        "type": "inject",
        "z": "b320d858532c1eb7",
        "name": "Test JSON Sensor packet",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/out/sensor",
        "payload": "{\"type\":\"sensor\",\"nodeId\":862487472,\"counter\":5670,\"battery\":0,\"voltage\":0,\"uptime\":173667,\"analog\":[553,593,569,71],\"digital\":198,\"timestamp_ms\":168713090,\"timestamp\":1750146309,\"time\":\"2025-06-17 17:45:09\",\"time_iso\":\"2025-06-17T17:45:09+1000\",\"GW\":\"WiFi LoRa 32 V3.2\",\"GW_ip\":\"192.168.20.101\",\"GW_mac\":\"30:ED:A0:CB:0E:8C\"}",
        "payloadType": "json",
        "x": 430,
        "y": 700,
        "wires": [
            [
                "74592d25870dc84b"
            ]
        ]
    },
    {
        "id": "0a0d227dfd8d6a9f",
        "type": "inject",
        "z": "b320d858532c1eb7",
        "name": "Test JSON GNSS packet",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lora/out/gnss",
        "payload": "{\"type\":\"gnss\",\"nodeId\":862487472,\"counter\":1916,\"battery\":0,\"voltage\":2,\"uptime\":173719,\"latitude\":0,\"longitude\":0,\"speed\":0,\"course\":0,\"hdop\":0,\"timestamp_ms\":168765244,\"timestamp\":1750146361,\"time\":\"2025-06-17 17:46:01\",\"time_iso\":\"2025-06-17T17:46:01+1000\",\"GW\":\"WiFi LoRa 32 V3.2\",\"GW_ip\":\"192.168.20.101\",\"GW_mac\":\"30:ED:A0:CB:0E:8C\"}",
        "payloadType": "json",
        "x": 450,
        "y": 740,
        "wires": [
            [
                "74592d25870dc84b"
            ]
        ]
    }
]